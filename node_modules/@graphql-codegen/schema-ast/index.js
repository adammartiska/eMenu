'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const graphql = require('graphql');
const pluginHelpers = require('@graphql-codegen/plugin-helpers');
const path = require('path');

const plugin = async (schema, _documents, { commentDescriptions = false, includeDirectives = false, includeIntrospectionTypes = false, sort = false, federation }) => {
    const transformedSchemaAndAst = transformSchemaAST(schema, { sort, federation, includeIntrospectionTypes });
    return [
        includeIntrospectionTypes ? graphql.printIntrospectionSchema(transformedSchemaAndAst.schema) : null,
        includeDirectives
            ? graphql.print(transformedSchemaAndAst.ast)
            : graphql.printSchema(transformedSchemaAndAst.schema, { commentDescriptions }),
    ]
        .filter(Boolean)
        .join('\n');
};
const validate = async (_schema, _documents, _config, outputFile, allPlugins) => {
    const singlePlugin = allPlugins.length === 1;
    if (singlePlugin && path.extname(outputFile) !== '.graphql') {
        throw new Error(`Plugin "schema-ast" requires extension to be ".graphql"!`);
    }
};
function transformSchemaAST(schema, config) {
    schema = config.federation ? pluginHelpers.removeFederation(schema) : schema;
    if (config.includeIntrospectionTypes) {
        // See: https://spec.graphql.org/June2018/#sec-Schema-Introspection
        const introspectionAST = graphql.parse(`
      extend type Query {
        __schema: __Schema!
        __type(name: String!): __Type
      }
    `);
        schema = graphql.extendSchema(schema, introspectionAST);
    }
    let ast = pluginHelpers.getCachedDocumentNodeFromSchema(schema);
    ast = config.disableDescriptions
        ? graphql.visit(ast, {
            leave: node => ({
                ...node,
                description: undefined,
            }),
        })
        : ast;
    schema = config.disableDescriptions ? graphql.buildASTSchema(ast) : schema;
    return {
        schema,
        ast,
    };
}

exports.plugin = plugin;
exports.transformSchemaAST = transformSchemaAST;
exports.validate = validate;
