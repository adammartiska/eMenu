import { __assign, __spreadArray } from "tslib";
import { useCallback, useEffect, useState } from 'react';
import { useQuery } from "./useQuery.js";
var EAGER_METHODS = [
    'refetch',
    'fetchMore',
    'updateQuery',
    'startPolling',
    'subscribeToMore',
];
export function useLazyQuery(query, options) {
    var _a = useState({
        called: false,
        resolves: [],
    }), execution = _a[0], setExecution = _a[1];
    var execute = useCallback(function (executeOptions) {
        var resolve;
        var promise = new Promise(function (resolve1) { return (resolve = resolve1); });
        setExecution(function (execution) {
            if (execution.called) {
                result && result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables);
            }
            return {
                called: true,
                resolves: __spreadArray(__spreadArray([], execution.resolves, true), [resolve], false),
                options: executeOptions,
            };
        });
        return promise;
    }, []);
    var result = useQuery(query, __assign(__assign(__assign({}, options), execution.options), { fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby', skip: undefined }));
    useEffect(function () {
        var resolves = execution.resolves;
        if (!result.loading && resolves.length) {
            setExecution(function (execution) { return (__assign(__assign({}, execution), { resolves: [] })); });
            resolves.forEach(function (resolve) { return resolve(result); });
        }
    }, [result, execution]);
    if (!execution.called) {
        result = __assign(__assign({}, result), { loading: false, data: void 0, error: void 0, called: false });
        var _loop_1 = function (key) {
            var method = result[key];
            result[key] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                setExecution(function (execution) { return (__assign(__assign({}, execution), { called: true })); });
                return method.apply(void 0, args);
            };
        };
        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {
            var key = EAGER_METHODS_1[_i];
            _loop_1(key);
        }
    }
    return [execute, result];
}
//# sourceMappingURL=useLazyQuery.js.map