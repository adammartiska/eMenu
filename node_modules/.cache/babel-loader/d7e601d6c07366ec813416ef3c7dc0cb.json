{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(new GraphQLError(`Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`, selectionSet));\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(new GraphQLError(`Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`, node));\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,2BAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,SAAO;AACLC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,YAAMC,IAAI,GAAGH,OAAO,CAACI,OAAR,EAAb;AACA,YAAMC,YAAY,GAAGH,IAAI,CAACG,YAA1B;;AAEA,UAAIF,IAAJ,EAAU;AACR,YAAIL,UAAU,CAACD,YAAY,CAACM,IAAD,CAAb,CAAd,EAAoC;AAClC,cAAIE,YAAJ,EAAkB;AAChB,kBAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA5B;AACA,kBAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAAvB;AACAH,YAAAA,OAAO,CAACU,WAAR,CACE,IAAId,YAAJ,CACG,UAASU,SAAU,2CAA0CG,OAAQ,qBADxE,EAEEJ,YAFF,CADF;AAMD;AACF,SAXD,MAWO,IAAI,CAACA,YAAL,EAAmB;AACxB,gBAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA5B;AACA,gBAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAAvB;AACAH,UAAAA,OAAO,CAACU,WAAR,CACE,IAAId,YAAJ,CACG,UAASU,SAAU,cAAaG,OAAQ,uDAAsDH,SAAU,YAD3G,EAEEJ,IAFF,CADF;AAMD;AACF;AACF;;AA5BI,GAAP;AA8BD","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                selectionSet,\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}