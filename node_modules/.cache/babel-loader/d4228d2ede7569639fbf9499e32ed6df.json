{"ast":null,"code":"import { remove } from 'ts-invariant/process';\nimport { Source } from 'graphql';\nexport function removeTemporaryGlobals() {\n  return typeof Source === \"function\" ? remove() : remove();\n}","map":{"version":3,"sources":["../../../src/utilities/globals/fix-graphql.ts"],"names":[],"mappings":"AAOA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,MAAT,QAAuB,SAAvB;AAEA,OAAM,SAAU,sBAAV,GAAgC;AAEpC,SAAO,OAAO,MAAP,KAAkB,UAAlB,GAA+B,MAAM,EAArC,GAA0C,MAAM,EAAvD;AACD","sourcesContent":["// The ordering of these imports is important, because it ensures the temporary\n// process.env.NODE_ENV polyfill is defined globally (if necessary) before we\n// import { Source } from 'graphql'. The instanceOf function that we really care\n// about (the one that uses process.env.NODE_ENV) is not exported from the\n// top-level graphql package, but graphql/language/source uses instanceOf, and\n// has relatively few dependencies, so importing it here should not increase\n// bundle sizes as much as other options.\nimport { remove } from 'ts-invariant/process';\nimport { Source } from 'graphql';\n\nexport function removeTemporaryGlobals() {\n  // Using Source here here just to make sure it won't be tree-shaken away.\n  return typeof Source === \"function\" ? remove() : remove();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}