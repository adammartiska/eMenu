{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);\n        break;\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(node => node === operation || node.kind === Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value))\n    };\n  }\n\n  return separatedDocumentASTs;\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    }\n\n  });\n  return dependencies;\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/utilities/separateOperations.mjs"],"names":["Kind","visit","separateOperations","documentAST","operations","depGraph","Object","create","definitionNode","definitions","kind","OPERATION_DEFINITION","push","FRAGMENT_DEFINITION","name","value","collectDependencies","selectionSet","separatedDocumentASTs","operation","dependencies","Set","fragmentName","collectTransitiveDependencies","operationName","DOCUMENT","filter","node","has","collected","fromName","add","immediateDeps","undefined","toName","FragmentSpread"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyC;AAC9C,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB,CAF8C,CAER;;AAEtC,OAAK,MAAMC,cAAX,IAA6BL,WAAW,CAACM,WAAzC,EAAsD;AACpD,YAAQD,cAAc,CAACE,IAAvB;AACE,WAAKV,IAAI,CAACW,oBAAV;AACEP,QAAAA,UAAU,CAACQ,IAAX,CAAgBJ,cAAhB;AACA;;AAEF,WAAKR,IAAI,CAACa,mBAAV;AACER,QAAAA,QAAQ,CAACG,cAAc,CAACM,IAAf,CAAoBC,KAArB,CAAR,GAAsCC,mBAAmB,CACvDR,cAAc,CAACS,YADwC,CAAzD;AAGA;AATJ;AAWD,GAhB6C,CAgB5C;AACF;;;AAEA,QAAMC,qBAAqB,GAAGZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B;;AAEA,OAAK,MAAMY,SAAX,IAAwBf,UAAxB,EAAoC;AAClC,UAAMgB,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAAK,MAAMC,YAAX,IAA2BN,mBAAmB,CAACG,SAAS,CAACF,YAAX,CAA9C,EAAwE;AACtEM,MAAAA,6BAA6B,CAACH,YAAD,EAAef,QAAf,EAAyBiB,YAAzB,CAA7B;AACD,KALiC,CAKhC;;;AAEF,UAAME,aAAa,GAAGL,SAAS,CAACL,IAAV,GAAiBK,SAAS,CAACL,IAAV,CAAeC,KAAhC,GAAwC,EAA9D,CAPkC,CAOgC;AAClE;;AAEAG,IAAAA,qBAAqB,CAACM,aAAD,CAArB,GAAuC;AACrCd,MAAAA,IAAI,EAAEV,IAAI,CAACyB,QAD0B;AAErChB,MAAAA,WAAW,EAAEN,WAAW,CAACM,WAAZ,CAAwBiB,MAAxB,CACVC,IAAD,IACEA,IAAI,KAAKR,SAAT,IACCQ,IAAI,CAACjB,IAAL,KAAcV,IAAI,CAACa,mBAAnB,IACCO,YAAY,CAACQ,GAAb,CAAiBD,IAAI,CAACb,IAAL,CAAUC,KAA3B,CAJO;AAFwB,KAAvC;AASD;;AAED,SAAOG,qBAAP;AACD,C,CAED;AACA;;AACA,SAASK,6BAAT,CAAuCM,SAAvC,EAAkDxB,QAAlD,EAA4DyB,QAA5D,EAAsE;AACpE,MAAI,CAACD,SAAS,CAACD,GAAV,CAAcE,QAAd,CAAL,EAA8B;AAC5BD,IAAAA,SAAS,CAACE,GAAV,CAAcD,QAAd;AACA,UAAME,aAAa,GAAG3B,QAAQ,CAACyB,QAAD,CAA9B;;AAEA,QAAIE,aAAa,KAAKC,SAAtB,EAAiC;AAC/B,WAAK,MAAMC,MAAX,IAAqBF,aAArB,EAAoC;AAClCT,QAAAA,6BAA6B,CAACM,SAAD,EAAYxB,QAAZ,EAAsB6B,MAAtB,CAA7B;AACD;AACF;AACF;AACF;;AAED,SAASlB,mBAAT,CAA6BC,YAA7B,EAA2C;AACzC,QAAMG,YAAY,GAAG,EAArB;AACAnB,EAAAA,KAAK,CAACgB,YAAD,EAAe;AAClBkB,IAAAA,cAAc,CAACR,IAAD,EAAO;AACnBP,MAAAA,YAAY,CAACR,IAAb,CAAkBe,IAAI,CAACb,IAAL,CAAUC,KAA5B;AACD;;AAHiB,GAAf,CAAL;AAKA,SAAOK,YAAP;AACD","sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(\n          definitionNode.selectionSet,\n        );\n        break;\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(\n        (node) =>\n          node === operation ||\n          (node.kind === Kind.FRAGMENT_DEFINITION &&\n            dependencies.has(node.name.value)),\n      ),\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    },\n  });\n  return dependencies;\n}\n"]},"metadata":{},"sourceType":"module"}