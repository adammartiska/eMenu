{"ast":null,"code":"import { __assign } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { useAfterFastRefresh } from \"./utils/useAfterFastRefresh.js\";\nexport function useSubscription(subscription, options) {\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      forceUpdate = _a[1];\n\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _b = useState({\n    loading: !updatedOptions.skip,\n    error: void 0,\n    data: void 0\n  }),\n      result = _b[0],\n      setResult = _b[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  if (__DEV__) {\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return function () {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":";AAAA,OAAO,kCAAP;AAEA,SAAS,UAAT,EAAqB,QAArB,EAA+B,MAA/B,EAAuC,SAAvC,EAAkD,UAAlD,QAAoE,OAApE;AAKA,SAAS,gBAAT,QAAiC,kBAAjC;AAEA,SAAS,gBAAT,QAAiC,qBAAjC;AACA,SAAS,mBAAT,QAAoC,gCAApC;AAEA,OAAM,SAAU,eAAV,CACJ,YADI,EAEJ,OAFI,EAEgD;AAE9C,MAAA,EAAA,GAAkB,UAAU,CAAC,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,GAAD,CAAA;AAAK,GAAX,EAAa,CAAb,CAA5B;AAAA,MAAG,WAAW,GAAA,EAAA,CAAA,CAAA,CAAd;;AACN,MAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAA1B;AACA,MAAM,cAAc,GAAG,OAAO,GAC3B,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;AAAE,IAAA,YAAY,EAAA;AAAd,GAAb,CAD2B,GAE1B;AAAE,IAAA,YAAY,EAAA;AAAd,GAFJ;;AAGM,MAAA,EAAA,GAAsB,QAAQ,CAAC;AACnC,IAAA,OAAO,EAAE,CAAC,cAAc,CAAC,IADU;AAEnC,IAAA,KAAK,EAAE,KAAK,CAFuB;AAGnC,IAAA,IAAI,EAAE,KAAK;AAHwB,GAAD,CAA9B;AAAA,MAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;AAAA,MAAS,SAAS,GAAA,EAAA,CAAA,CAAA,CAAlB;;AAMN,MAAM,mBAAmB,GAAG,MAAM,EAAlC;;AACA,WAAS,sBAAT,GAA+B;AAC7B,QAAI,CAAC,mBAAmB,CAAC,OAAzB,EAAkC;AAChC,MAAA,mBAAmB,CAAC,OAApB,GAA8B,IAAI,gBAAJ,CAAwC;AACpE,QAAA,OAAO,EAAE,cAD2D;AAEpE,QAAA,OAAO,EAAA,OAF6D;AAGpE,QAAA,SAAS,EAAA;AAH2D,OAAxC,CAA9B;AAKD;;AACD,WAAO,mBAAmB,CAAC,OAA3B;AACD;;AAED,MAAM,gBAAgB,GAAG,sBAAsB,EAA/C;AACA,EAAA,gBAAgB,CAAC,UAAjB,CAA4B,cAA5B,EAA4C,IAA5C;AACA,EAAA,gBAAgB,CAAC,OAAjB,GAA2B,OAA3B;;AAEA,MAAI,OAAJ,EAAa;AAEX,IAAA,mBAAmB,CAAC,WAAD,CAAnB;AACD;;AAED,EAAA,SAAS,CAAC,YAAA;AAAM,WAAA,gBAAgB,CAAhB,YAAA,EAAA;AAA+B,GAAtC,CAAT;AACA,EAAA,SAAS,CAAC,YAAA;AACR,WAAO,YAAA;AACL,MAAA,gBAAgB,CAAC,OAAjB;AACA,MAAA,mBAAmB,CAAC,OAApB,GAA8B,KAAK,CAAnC;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,SAAO,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAP;AACD","sourcesContent":["import '../../utilities/globals';\n\nimport { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\nimport { useAfterFastRefresh } from './utils/useAfterFastRefresh';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: void 0,\n    data: void 0,\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we can resubscribe\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => {\n    return () => {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n\n  return subscriptionData.execute(result);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}