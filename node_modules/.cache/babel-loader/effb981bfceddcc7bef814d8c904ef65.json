{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const MealsDocument = gql`\n    query Meals {\n  meals {\n    id\n    name\n    price\n  }\n}\n    `;\n/**\n * __useMealsQuery__\n *\n * To run a query within a React component, call `useMealsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMealsQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MealsDocument, options);\n}\n\n_s(useMealsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMealsLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MealsDocument, options);\n}\n\n_s2(useMealsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const DrinksDocument = gql`\n    query Drinks {\n  drinks {\n    id\n    name\n    price\n  }\n}\n    `;\n/**\n * __useDrinksQuery__\n *\n * To run a query within a React component, call `useDrinksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDrinksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDrinksQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useDrinksQuery(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(DrinksDocument, options);\n}\n\n_s3(useDrinksQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useDrinksLazyQuery(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(DrinksDocument, options);\n}\n\n_s4(useDrinksLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","MealsDocument","useMealsQuery","baseOptions","options","useQuery","useMealsLazyQuery","useLazyQuery","DrinksDocument","useDrinksQuery","useDrinksLazyQuery"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AAkDA,OAAO,MAAMC,aAAa,GAAGH,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,aAAT,CAAuBC,WAAvB,EAA+F;AAAA;;AAC9F,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACM,QAAP,CAAiDJ,aAAjD,EAAgEG,OAAhE,CAAP;AACD;;GAHSF,a;UAEDH,MAAM,CAACM,Q;;;AAEtB,OAAO,SAASC,iBAAT,CAA2BH,WAA3B,EAAuG;AAAA;;AACpG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACQ,YAAP,CAAqDN,aAArD,EAAoEG,OAApE,CAAP;AACD;;IAHOE,iB;UAECP,MAAM,CAACQ,Y;;;AAKxB,OAAO,MAAMC,cAAc,GAAGV,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,cAAT,CAAwBN,WAAxB,EAAkG;AAAA;;AACjG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACM,QAAP,CAAmDG,cAAnD,EAAmEJ,OAAnE,CAAP;AACD;;IAHSK,c;UAEDV,MAAM,CAACM,Q;;;AAEtB,OAAO,SAASK,kBAAT,CAA4BP,WAA5B,EAA0G;AAAA;;AACvG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACQ,YAAP,CAAuDC,cAAvD,EAAuEJ,OAAvE,CAAP;AACD;;IAHOM,kB;UAECX,MAAM,CAACQ,Y","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type DrinkType = {\n  __typename?: 'DrinkType';\n  /** Amount of drink measured in stored unit */\n  amount: Scalars['Float'];\n  /** Drink Id */\n  id: Scalars['Int'];\n  /** Drink Name */\n  name: Scalars['String'];\n  /** Drink Price */\n  price: Scalars['Float'];\n  /** Unit in which is Amount stated */\n  unit: Scalars['String'];\n};\n\nexport type MealType = {\n  __typename?: 'MealType';\n  /** Meal id */\n  id: Scalars['Int'];\n  /** Meal name */\n  name: Scalars['String'];\n  /** Meal price */\n  price: Scalars['Float'];\n};\n\nexport type MealsServiceQuery = {\n  __typename?: 'MealsServiceQuery';\n  drinks?: Maybe<Array<Maybe<DrinkType>>>;\n  meals?: Maybe<Array<Maybe<MealType>>>;\n};\n\nexport type MealsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MealsQuery = { __typename?: 'MealsServiceQuery', meals?: Array<{ __typename?: 'MealType', id: number, name: string, price: number } | null | undefined> | null | undefined };\n\nexport type DrinksQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type DrinksQuery = { __typename?: 'MealsServiceQuery', drinks?: Array<{ __typename?: 'DrinkType', id: number, name: string, price: number } | null | undefined> | null | undefined };\n\n\nexport const MealsDocument = gql`\n    query Meals {\n  meals {\n    id\n    name\n    price\n  }\n}\n    `;\n\n/**\n * __useMealsQuery__\n *\n * To run a query within a React component, call `useMealsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMealsQuery(baseOptions?: Apollo.QueryHookOptions<MealsQuery, MealsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MealsQuery, MealsQueryVariables>(MealsDocument, options);\n      }\nexport function useMealsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MealsQuery, MealsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MealsQuery, MealsQueryVariables>(MealsDocument, options);\n        }\nexport type MealsQueryHookResult = ReturnType<typeof useMealsQuery>;\nexport type MealsLazyQueryHookResult = ReturnType<typeof useMealsLazyQuery>;\nexport type MealsQueryResult = Apollo.QueryResult<MealsQuery, MealsQueryVariables>;\nexport const DrinksDocument = gql`\n    query Drinks {\n  drinks {\n    id\n    name\n    price\n  }\n}\n    `;\n\n/**\n * __useDrinksQuery__\n *\n * To run a query within a React component, call `useDrinksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDrinksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDrinksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDrinksQuery(baseOptions?: Apollo.QueryHookOptions<DrinksQuery, DrinksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DrinksQuery, DrinksQueryVariables>(DrinksDocument, options);\n      }\nexport function useDrinksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DrinksQuery, DrinksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DrinksQuery, DrinksQueryVariables>(DrinksDocument, options);\n        }\nexport type DrinksQueryHookResult = ReturnType<typeof useDrinksQuery>;\nexport type DrinksLazyQueryHookResult = ReturnType<typeof useDrinksLazyQuery>;\nexport type DrinksQueryResult = Apollo.QueryResult<DrinksQuery, DrinksQueryVariables>;"]},"metadata":{},"sourceType":"module"}