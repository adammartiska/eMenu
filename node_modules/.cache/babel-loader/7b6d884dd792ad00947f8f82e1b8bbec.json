{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\n\nvar delModifier = function () {\n  return DELETE;\n};\n\nvar INVALIDATE = Object.create(null);\n\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n\n      if (id) {\n        var ref = makeReference(id);\n\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n\n        return ref;\n      }\n    };\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n\n    return evicted;\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n\n    return obj;\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      var __META = newData.__META,\n          rest_1 = __rest(newData, [\"__META\"]);\n\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n\n    return ids;\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n\n  return EntityStore;\n}();\n\nexport { EntityStore };\n\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var policies = _a.policies,\n          _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n\n    while (p.parent) p = p.parent;\n\n    return p.getStorage.apply(p, arguments);\n  };\n\n  return Layer;\n}(EntityStore);\n\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n\n  return Stump;\n}(Layer);\n\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/entityStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { dep, OptimisticDependencyFunction } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(\n    older: string | StoreObject,\n    newer: StoreObject | string,\n  ): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\"\n        ? this.lookup(dataId = older)\n        : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\"\n        ? this.lookup(dataId = newer)\n        : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(\n      typeof dataId === \"string\",\n      \"store.merge expects a string ID\",\n    );\n\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty.__typename &&\n            !(existing && existing.__typename) &&\n            // Since we return default root __typename strings\n            // automatically from store.get, we don't need to dirty the\n            // ROOT_QUERY.__typename field if merged.__typename is equal\n            // to the default string (usually \"Query\").\n            this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId as string, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(\n    options: Cache.EvictOptions,\n    limit: EntityStore,\n  ): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null,\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\",\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string,\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName],\n                         parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group),\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge() {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge.apply(this.parent, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}