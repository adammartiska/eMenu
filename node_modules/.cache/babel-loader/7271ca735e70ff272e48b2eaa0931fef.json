{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\nimport { isType, isRequiredArgument } from '../../type/definition.mjs';\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\n\nexport function ProvidedRequiredArgumentsRule(context) {\n  return { // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n        (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map(arg => arg.name.value));\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(new GraphQLError(`Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`, fieldNode));\n          }\n        }\n      }\n\n    }\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), arg => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n      const argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), arg => arg.name.value);\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n          const argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n          const argNodeMap = new Set(argNodes.map(arg => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type) ? inspect(argDef.type) : print(argDef.type);\n              context.reportError(new GraphQLError(`Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`, directiveNode));\n            }\n          }\n        }\n      }\n\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"],"names":["inspect","keyMap","GraphQLError","Kind","print","specifiedDirectives","isType","isRequiredArgument","ProvidedRequiredArgumentsRule","context","ProvidedRequiredArgumentsOnDirectivesRule","Field","leave","fieldNode","_fieldNode$arguments","fieldDef","getFieldDef","providedArgs","Set","arguments","map","arg","name","value","argDef","args","has","argTypeStr","type","reportError","_schema$getDirectives","requiredArgsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","filter","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","_def$arguments","argNodes","isRequiredArgumentNode","Directive","directiveNode","directiveName","requiredArgs","_directiveNode$argume","argNodeMap","argName","entries","argType","NON_NULL_TYPE","defaultValue"],"mappings":"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","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\nimport { isType, isRequiredArgument } from '../../type/definition.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                fieldNode,\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  directiveNode,\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n"]},"metadata":{},"sourceType":"module"}