{"ast":null,"code":"import _isArray from \"./_isArray.js\";\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/ramda/es/internal/_checkForMethod.js"],"names":["_isArray","_checkForMethod","methodname","fn","length","arguments","obj","apply","Array","prototype","slice","call"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,eAAT,CAAyBC,UAAzB,EAAqCC,EAArC,EAAyC;AACtD,SAAO,YAAY;AACjB,QAAIC,MAAM,GAAGC,SAAS,CAACD,MAAvB;;AAEA,QAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAOD,EAAE,EAAT;AACD;;AAED,QAAIG,GAAG,GAAGD,SAAS,CAACD,MAAM,GAAG,CAAV,CAAnB;AACA,WAAOJ,QAAQ,CAACM,GAAD,CAAR,IAAiB,OAAOA,GAAG,CAACJ,UAAD,CAAV,KAA2B,UAA5C,GAAyDC,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAzD,GAAqFC,GAAG,CAACJ,UAAD,CAAH,CAAgBK,KAAhB,CAAsBD,GAAtB,EAA2BE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,EAAyCD,MAAM,GAAG,CAAlD,CAA3B,CAA5F;AACD,GATD;AAUD","sourcesContent":["import _isArray from \"./_isArray.js\";\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}"]},"metadata":{},"sourceType":"module"}