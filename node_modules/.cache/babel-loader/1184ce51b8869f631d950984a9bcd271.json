{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const userSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    inCart: {\n      meals: [],\n      drinks: []\n    },\n    ordered: {\n      meals: [],\n      drinks: []\n    }\n  },\n  reducers: {\n    addDrinkToCart: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.inCart.drinks = [...state.inCart.drinks, payload]; // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    addMealToCart: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.inCart.meals = [...state.inCart.meals, payload];\n    },\n    emptyCart: state => {\n      //TODO is this good or should I assign it from backend?\n      state.ordered.meals = state.inCart.meals;\n      state.ordered.drinks = state.inCart.drinks;\n      state.inCart.meals = [];\n      state.inCart.drinks = [];\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addDrinkToCart,\n  addMealToCart,\n  emptyCart\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/pages/orderSlice.js"],"names":["createSlice","userSlice","name","initialState","inCart","meals","drinks","ordered","reducers","addDrinkToCart","state","payload","addMealToCart","emptyCart","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,MAAM,EAAE;AAFF,KADI;AAKZC,IAAAA,OAAO,EAAE;AACPF,MAAAA,KAAK,EAAE,EADA;AAEPC,MAAAA,MAAM,EAAE;AAFD;AALG,GAFqB;AAYnCE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACtCD,MAAAA,KAAK,CAACN,MAAN,CAAaE,MAAb,GAAsB,CAAC,GAAGI,KAAK,CAACN,MAAN,CAAaE,MAAjB,EAAyBK,OAAzB,CAAtB,CADsC,CAEtC;AACA;AACA;AACA;AACD,KAPO;AAQRC,IAAAA,aAAa,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACrCD,MAAAA,KAAK,CAACN,MAAN,CAAaC,KAAb,GAAqB,CAAC,GAAGK,KAAK,CAACN,MAAN,CAAaC,KAAjB,EAAwBM,OAAxB,CAArB;AACD,KAVO;AAWRE,IAAAA,SAAS,EAAGH,KAAD,IAAW;AACpB;AACAA,MAAAA,KAAK,CAACH,OAAN,CAAcF,KAAd,GAAsBK,KAAK,CAACN,MAAN,CAAaC,KAAnC;AACAK,MAAAA,KAAK,CAACH,OAAN,CAAcD,MAAd,GAAuBI,KAAK,CAACN,MAAN,CAAaE,MAApC;AACAI,MAAAA,KAAK,CAACN,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACAK,MAAAA,KAAK,CAACN,MAAN,CAAaE,MAAb,GAAsB,EAAtB;AACD;AAjBO;AAZyB,CAAD,CAA7B,C,CAiCP;;AACA,OAAO,MAAM;AAAEG,EAAAA,cAAF;AAAkBG,EAAAA,aAAlB;AAAiCC,EAAAA;AAAjC,IAA+CZ,SAAS,CAACa,OAA/D;AAEP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    inCart: {\n      meals: [],\n      drinks: [],\n    },\n    ordered: {\n      meals: [],\n      drinks: [],\n    },\n  },\n  reducers: {\n    addDrinkToCart: (state, { payload }) => {\n      state.inCart.drinks = [...state.inCart.drinks, payload];\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    addMealToCart: (state, { payload }) => {\n      state.inCart.meals = [...state.inCart.meals, payload];\n    },\n    emptyCart: (state) => {\n      //TODO is this good or should I assign it from backend?\n      state.ordered.meals = state.inCart.meals;\n      state.ordered.drinks = state.inCart.drinks;\n      state.inCart.meals = [];\n      state.inCart.drinks = [];\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addDrinkToCart, addMealToCart, emptyCart } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}