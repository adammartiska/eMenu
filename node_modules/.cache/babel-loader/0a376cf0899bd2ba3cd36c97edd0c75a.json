{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes; // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n\n\n  const originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + inspect(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/error/locatedError.mjs"],"names":["inspect","GraphQLError","locatedError","rawOriginalError","nodes","path","_nodes","originalError","Error","isLocatedGraphQLError","message","source","positions","error","Array","isArray"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,gBAAtB,EAAwCC,KAAxC,EAA+CC,IAA/C,EAAqD;AAC1D,MAAIC,MAAJ,CAD0D,CAG1D;;;AACA,QAAMC,aAAa,GACjBJ,gBAAgB,YAAYK,KAA5B,GACIL,gBADJ,GAEI,IAAIK,KAAJ,CAAU,6BAA6BR,OAAO,CAACG,gBAAD,CAA9C,CAHN,CAJ0D,CAOe;;AAEzE,MAAIM,qBAAqB,CAACF,aAAD,CAAzB,EAA0C;AACxC,WAAOA,aAAP;AACD;;AAED,SAAO,IAAIN,YAAJ,CACLM,aAAa,CAACG,OADT,EAEL,CAACJ,MAAM,GAAGC,aAAa,CAACH,KAAxB,MAAmC,IAAnC,IAA2CE,MAAM,KAAK,KAAK,CAA3D,GACIA,MADJ,GAEIF,KAJC,EAKLG,aAAa,CAACI,MALT,EAMLJ,aAAa,CAACK,SANT,EAOLP,IAPK,EAQLE,aARK,CAAP;AAUD;;AAED,SAASE,qBAAT,CAA+BI,KAA/B,EAAsC;AACpC,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACR,IAApB,CAAP;AACD","sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n  const originalError =\n    rawOriginalError instanceof Error\n      ? rawOriginalError\n      : new Error('Unexpected error value: ' + inspect(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(\n    originalError.message,\n    (_nodes = originalError.nodes) !== null && _nodes !== void 0\n      ? _nodes\n      : nodes,\n    originalError.source,\n    originalError.positions,\n    path,\n    originalError,\n  );\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n"]},"metadata":{},"sourceType":"module"}