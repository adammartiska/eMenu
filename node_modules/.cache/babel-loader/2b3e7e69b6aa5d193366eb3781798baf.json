{"ast":null,"code":"import { Source, isSource } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\nimport { Lexer, isPunctuatorTokenKind } from '../language/lexer.mjs';\nimport { dedentBlockStringValue, getBlockStringIndentation } from '../language/blockString.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  const rawStr = blockStr.slice(3, -3);\n  let body = dedentBlockStringValue(rawStr);\n\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n\n  const hasTrailingQuote = body.endsWith('\"') && !body.endsWith('\\\\\"\"\"');\n\n  if (hasTrailingQuote || body.endsWith('\\\\')) {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/utilities/stripIgnoredCharacters.mjs"],"names":["Source","isSource","TokenKind","Lexer","isPunctuatorTokenKind","dedentBlockStringValue","getBlockStringIndentation","stripIgnoredCharacters","source","sourceObj","body","lexer","strippedBody","wasLastAddedTokenNonPunctuator","advance","kind","EOF","currentToken","token","tokenKind","isNonPunctuator","SPREAD","tokenBody","slice","start","end","BLOCK_STRING","dedentBlockString","blockStr","rawStr","hasTrailingQuote","endsWith"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,wBAAjC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,KAAT,EAAgBC,qBAAhB,QAA6C,uBAA7C;AACA,SACEC,sBADF,EAEEC,yBAFF,QAGO,6BAHP;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7C,QAAMC,SAAS,GAAGR,QAAQ,CAACO,MAAD,CAAR,GAAmBA,MAAnB,GAA4B,IAAIR,MAAJ,CAAWQ,MAAX,CAA9C;AACA,QAAME,IAAI,GAAGD,SAAS,CAACC,IAAvB;AACA,QAAMC,KAAK,GAAG,IAAIR,KAAJ,CAAUM,SAAV,CAAd;AACA,MAAIG,YAAY,GAAG,EAAnB;AACA,MAAIC,8BAA8B,GAAG,KAArC;;AAEA,SAAOF,KAAK,CAACG,OAAN,GAAgBC,IAAhB,KAAyBb,SAAS,CAACc,GAA1C,EAA+C;AAC7C,UAAMC,YAAY,GAAGN,KAAK,CAACO,KAA3B;AACA,UAAMC,SAAS,GAAGF,YAAY,CAACF,IAA/B;AACA;AACJ;AACA;AACA;AACA;;AAEI,UAAMK,eAAe,GAAG,CAAChB,qBAAqB,CAACa,YAAY,CAACF,IAAd,CAA9C;;AAEA,QAAIF,8BAAJ,EAAoC;AAClC,UAAIO,eAAe,IAAIH,YAAY,CAACF,IAAb,KAAsBb,SAAS,CAACmB,MAAvD,EAA+D;AAC7DT,QAAAA,YAAY,IAAI,GAAhB;AACD;AACF;;AAED,UAAMU,SAAS,GAAGZ,IAAI,CAACa,KAAL,CAAWN,YAAY,CAACO,KAAxB,EAA+BP,YAAY,CAACQ,GAA5C,CAAlB;;AAEA,QAAIN,SAAS,KAAKjB,SAAS,CAACwB,YAA5B,EAA0C;AACxCd,MAAAA,YAAY,IAAIe,iBAAiB,CAACL,SAAD,CAAjC;AACD,KAFD,MAEO;AACLV,MAAAA,YAAY,IAAIU,SAAhB;AACD;;AAEDT,IAAAA,8BAA8B,GAAGO,eAAjC;AACD;;AAED,SAAOR,YAAP;AACD;;AAED,SAASe,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC;AACA,QAAMC,MAAM,GAAGD,QAAQ,CAACL,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAf;AACA,MAAIb,IAAI,GAAGL,sBAAsB,CAACwB,MAAD,CAAjC;;AAEA,MAAIvB,yBAAyB,CAACI,IAAD,CAAzB,GAAkC,CAAtC,EAAyC;AACvCA,IAAAA,IAAI,GAAG,OAAOA,IAAd;AACD;;AAED,QAAMoB,gBAAgB,GAAGpB,IAAI,CAACqB,QAAL,CAAc,GAAd,KAAsB,CAACrB,IAAI,CAACqB,QAAL,CAAc,OAAd,CAAhD;;AAEA,MAAID,gBAAgB,IAAIpB,IAAI,CAACqB,QAAL,CAAc,IAAd,CAAxB,EAA6C;AAC3CrB,IAAAA,IAAI,IAAI,IAAR;AACD;;AAED,SAAO,QAAQA,IAAR,GAAe,KAAtB;AACD","sourcesContent":["import { Source, isSource } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\nimport { Lexer, isPunctuatorTokenKind } from '../language/lexer.mjs';\nimport {\n  dedentBlockStringValue,\n  getBlockStringIndentation,\n} from '../language/blockString.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  const rawStr = blockStr.slice(3, -3);\n  let body = dedentBlockStringValue(rawStr);\n\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n\n  const hasTrailingQuote = body.endsWith('\"') && !body.endsWith('\\\\\"\"\"');\n\n  if (hasTrailingQuote || body.endsWith('\\\\')) {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}\n"]},"metadata":{},"sourceType":"module"}