{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 34);\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 35);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 36);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 37);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}","map":{"version":3,"sources":["../../../src/react/parser/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}