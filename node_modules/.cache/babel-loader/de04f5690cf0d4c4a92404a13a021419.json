{"ast":null,"code":"/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n */\n\n/** The GraphQL.js version info. */\nexport { version, versionInfo } from './version.mjs';\n/** The primary entry point into fulfilling a GraphQL request. */\n\nexport { graphql, graphqlSync } from './graphql.mjs';\n/** Create and operate on GraphQL type definitions and schema. */\n\nexport { resolveObjMapThunk, resolveReadonlyArrayThunk\n/** Definitions */\n, GraphQLSchema, GraphQLDirective, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull\n/** Standard GraphQL Scalars */\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID\n/** Int boundaries constants */\n, GRAPHQL_MAX_INT, GRAPHQL_MIN_INT\n/** Built-in Directives defined by the Spec */\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective\n/** \"Enum\" of Type Kinds */\n, TypeKind\n/** Constant Deprecation Reason */\n, DEFAULT_DEPRECATION_REASON\n/** GraphQL Types for introspection. */\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind\n/** Meta-field definitions. */\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef\n/** Predicates */\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective\n/** Assertions */\n, assertSchema, assertDirective, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType\n/** Un-modifiers */\n, getNullableType, getNamedType\n/** Validate GraphQL schema. */\n, validateSchema, assertValidSchema\n/** Upholds the spec rules about naming. */\n, assertName, assertEnumValueName } from './type/index.mjs';\n/** Parse and operate on GraphQL language source files. */\n\nexport { Token, Source, Location, OperationTypeNode, getLocation\n/** Print source location */\n, printLocation, printSourceLocation\n/** Lex */\n, Lexer, TokenKind\n/** Parse */\n, parse, parseValue, parseConstValue, parseType\n/** Print */\n, print\n/** Visit */\n, visit, visitInParallel, getVisitFn, getEnterLeaveForKind, BREAK, Kind, DirectiveLocation\n/** Predicates */\n, isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isConstValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language/index.mjs';\n/** Execute GraphQL queries. */\n\nexport { execute, executeSync, defaultFieldResolver, defaultTypeResolver, responsePathAsArray, getDirectiveValues, subscribe, createSourceEventStream } from './execution/index.mjs';\n/** Validate GraphQL documents. */\n\nexport { validate, ValidationContext\n/** All validation rules in the GraphQL Specification. */\n, specifiedRules\n/** Individual validation rules. */\n, ExecutableDefinitionsRule, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule\n/** SDL-specific validation rules */\n, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueArgumentDefinitionNamesRule, UniqueDirectiveNamesRule, PossibleTypeExtensionsRule\n/** Custom validation rules */\n, NoDeprecatedCustomRule, NoSchemaIntrospectionCustomRule } from './validation/index.mjs';\n/** Create, format, and print GraphQL errors. */\n\nexport { GraphQLError, syntaxError, locatedError, printError, formatError } from './error/index.mjs';\n/** Utilities for operating on GraphQL type schema and parsed sources. */\n\nexport {\n/**\n * Produce the GraphQL query recommended for a full schema introspection.\n * Accepts optional IntrospectionOptions.\n */\ngetIntrospectionQuery\n/** Gets the target Operation from a Document. */\n, getOperationAST\n/** Gets the Type for the target Operation AST. */\n, getOperationRootType\n/** Convert a GraphQLSchema to an IntrospectionQuery. */\n, introspectionFromSchema\n/** Build a GraphQLSchema from an introspection result. */\n, buildClientSchema\n/** Build a GraphQLSchema from a parsed GraphQL Schema language AST. */\n, buildASTSchema\n/** Build a GraphQLSchema from a GraphQL schema language document. */\n, buildSchema\n/** Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST. */\n, extendSchema\n/** Sort a GraphQLSchema. */\n, lexicographicSortSchema\n/** Print a GraphQLSchema to GraphQL Schema language. */\n, printSchema\n/** Print a GraphQLType to GraphQL Schema language. */\n, printType\n/** Prints the built-in introspection schema in the Schema Language format. */\n, printIntrospectionSchema\n/** Create a GraphQLType from a GraphQL language AST. */\n, typeFromAST\n/** Create a JavaScript value from a GraphQL language AST with a Type. */\n, valueFromAST\n/** Create a JavaScript value from a GraphQL language AST without a Type. */\n, valueFromASTUntyped\n/** Create a GraphQL language AST from a JavaScript value. */\n, astFromValue\n/** A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system. */\n, TypeInfo, visitWithTypeInfo\n/** Coerces a JavaScript value to a GraphQL type, or produces errors. */\n, coerceInputValue\n/** Concatenates multiple AST together. */\n, concatAST\n/** Separates an AST into an AST per Operation. */\n, separateOperations\n/** Strips characters that are not significant to the validity or execution of a GraphQL document. */\n, stripIgnoredCharacters\n/** Comparators for types */\n, isEqualType, isTypeSubTypeOf, doTypesOverlap\n/** Asserts a string is a valid GraphQL name. */\n, assertValidName\n/** Determine if a string is a valid GraphQL name. */\n, isValidNameError\n/** Compares two GraphQLSchemas and detects breaking changes. */\n, BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './utilities/index.mjs';","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/index.mjs"],"names":["version","versionInfo","graphql","graphqlSync","resolveObjMapThunk","resolveReadonlyArrayThunk","GraphQLSchema","GraphQLDirective","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","specifiedScalarTypes","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLBoolean","GraphQLID","GRAPHQL_MAX_INT","GRAPHQL_MIN_INT","specifiedDirectives","GraphQLIncludeDirective","GraphQLSkipDirective","GraphQLDeprecatedDirective","GraphQLSpecifiedByDirective","TypeKind","DEFAULT_DEPRECATION_REASON","introspectionTypes","__Schema","__Directive","__DirectiveLocation","__Type","__Field","__InputValue","__EnumValue","__TypeKind","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isSchema","isDirective","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isInputType","isOutputType","isLeafType","isCompositeType","isAbstractType","isWrappingType","isNullableType","isNamedType","isRequiredArgument","isRequiredInputField","isSpecifiedScalarType","isIntrospectionType","isSpecifiedDirective","assertSchema","assertDirective","assertType","assertScalarType","assertObjectType","assertInterfaceType","assertUnionType","assertEnumType","assertInputObjectType","assertListType","assertNonNullType","assertInputType","assertOutputType","assertLeafType","assertCompositeType","assertAbstractType","assertWrappingType","assertNullableType","assertNamedType","getNullableType","getNamedType","validateSchema","assertValidSchema","assertName","assertEnumValueName","Token","Source","Location","OperationTypeNode","getLocation","printLocation","printSourceLocation","Lexer","TokenKind","parse","parseValue","parseConstValue","parseType","print","visit","visitInParallel","getVisitFn","getEnterLeaveForKind","BREAK","Kind","DirectiveLocation","isDefinitionNode","isExecutableDefinitionNode","isSelectionNode","isValueNode","isConstValueNode","isTypeNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","execute","executeSync","defaultFieldResolver","defaultTypeResolver","responsePathAsArray","getDirectiveValues","subscribe","createSourceEventStream","validate","ValidationContext","specifiedRules","ExecutableDefinitionsRule","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedRequiredArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueArgumentDefinitionNamesRule","UniqueDirectiveNamesRule","PossibleTypeExtensionsRule","NoDeprecatedCustomRule","NoSchemaIntrospectionCustomRule","GraphQLError","syntaxError","locatedError","printError","formatError","getIntrospectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","extendSchema","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","visitWithTypeInfo","coerceInputValue","concatAST","separateOperations","stripIgnoredCharacters","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges"],"mappings":"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","sourcesContent":["/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n */\n\n/** The GraphQL.js version info. */\nexport { version, versionInfo } from './version.mjs';\n/** The primary entry point into fulfilling a GraphQL request. */\n\nexport { graphql, graphqlSync } from './graphql.mjs';\n/** Create and operate on GraphQL type definitions and schema. */\n\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk,\n  /** Definitions */\n  GraphQLSchema,\n  GraphQLDirective,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n  /** Standard GraphQL Scalars */\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID,\n  /** Int boundaries constants */\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT,\n  /** Built-in Directives defined by the Spec */\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  /** \"Enum\" of Type Kinds */\n  TypeKind,\n  /** Constant Deprecation Reason */\n  DEFAULT_DEPRECATION_REASON,\n  /** GraphQL Types for introspection. */\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n  /** Meta-field definitions. */\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n  /** Predicates */\n  isSchema,\n  isDirective,\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  isSpecifiedDirective,\n  /** Assertions */\n  assertSchema,\n  assertDirective,\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType,\n  /** Un-modifiers */\n  getNullableType,\n  getNamedType,\n  /** Validate GraphQL schema. */\n  validateSchema,\n  assertValidSchema,\n  /** Upholds the spec rules about naming. */\n  assertName,\n  assertEnumValueName,\n} from './type/index.mjs';\n\n/** Parse and operate on GraphQL language source files. */\nexport {\n  Token,\n  Source,\n  Location,\n  OperationTypeNode,\n  getLocation,\n  /** Print source location */\n  printLocation,\n  printSourceLocation,\n  /** Lex */\n  Lexer,\n  TokenKind,\n  /** Parse */\n  parse,\n  parseValue,\n  parseConstValue,\n  parseType,\n  /** Print */\n  print,\n  /** Visit */\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n  Kind,\n  DirectiveLocation,\n  /** Predicates */\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './language/index.mjs';\n\n/** Execute GraphQL queries. */\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  responsePathAsArray,\n  getDirectiveValues,\n  subscribe,\n  createSourceEventStream,\n} from './execution/index.mjs';\n\n/** Validate GraphQL documents. */\nexport {\n  validate,\n  ValidationContext,\n  /** All validation rules in the GraphQL Specification. */\n  specifiedRules,\n  /** Individual validation rules. */\n  ExecutableDefinitionsRule,\n  FieldsOnCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownArgumentNamesRule,\n  KnownDirectivesRule,\n  KnownFragmentNamesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  NoFragmentCyclesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedFragmentsRule,\n  NoUnusedVariablesRule,\n  OverlappingFieldsCanBeMergedRule,\n  PossibleFragmentSpreadsRule,\n  ProvidedRequiredArgumentsRule,\n  ScalarLeafsRule,\n  SingleFieldSubscriptionsRule,\n  UniqueArgumentNamesRule,\n  UniqueDirectivesPerLocationRule,\n  UniqueFragmentNamesRule,\n  UniqueInputFieldNamesRule,\n  UniqueOperationNamesRule,\n  UniqueVariableNamesRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n  /** SDL-specific validation rules */\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  PossibleTypeExtensionsRule,\n  /** Custom validation rules */\n  NoDeprecatedCustomRule,\n  NoSchemaIntrospectionCustomRule,\n} from './validation/index.mjs';\n\n/** Create, format, and print GraphQL errors. */\nexport {\n  GraphQLError,\n  syntaxError,\n  locatedError,\n  printError,\n  formatError,\n} from './error/index.mjs';\n\n/** Utilities for operating on GraphQL type schema and parsed sources. */\nexport {\n  /**\n   * Produce the GraphQL query recommended for a full schema introspection.\n   * Accepts optional IntrospectionOptions.\n   */\n  getIntrospectionQuery,\n  /** Gets the target Operation from a Document. */\n  getOperationAST,\n  /** Gets the Type for the target Operation AST. */\n  getOperationRootType,\n  /** Convert a GraphQLSchema to an IntrospectionQuery. */\n  introspectionFromSchema,\n  /** Build a GraphQLSchema from an introspection result. */\n  buildClientSchema,\n  /** Build a GraphQLSchema from a parsed GraphQL Schema language AST. */\n  buildASTSchema,\n  /** Build a GraphQLSchema from a GraphQL schema language document. */\n  buildSchema,\n  /** Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST. */\n  extendSchema,\n  /** Sort a GraphQLSchema. */\n  lexicographicSortSchema,\n  /** Print a GraphQLSchema to GraphQL Schema language. */\n  printSchema,\n  /** Print a GraphQLType to GraphQL Schema language. */\n  printType,\n  /** Prints the built-in introspection schema in the Schema Language format. */\n  printIntrospectionSchema,\n  /** Create a GraphQLType from a GraphQL language AST. */\n  typeFromAST,\n  /** Create a JavaScript value from a GraphQL language AST with a Type. */\n  valueFromAST,\n  /** Create a JavaScript value from a GraphQL language AST without a Type. */\n  valueFromASTUntyped,\n  /** Create a GraphQL language AST from a JavaScript value. */\n  astFromValue,\n  /** A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system. */\n  TypeInfo,\n  visitWithTypeInfo,\n  /** Coerces a JavaScript value to a GraphQL type, or produces errors. */\n  coerceInputValue,\n  /** Concatenates multiple AST together. */\n  concatAST,\n  /** Separates an AST into an AST per Operation. */\n  separateOperations,\n  /** Strips characters that are not significant to the validity or execution of a GraphQL document. */\n  stripIgnoredCharacters,\n  /** Comparators for types */\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n  /** Asserts a string is a valid GraphQL name. */\n  assertValidName,\n  /** Determine if a string is a valid GraphQL name. */\n  isValidNameError,\n  /** Compares two GraphQLSchemas and detects breaking changes. */\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './utilities/index.mjs';\n"]},"metadata":{},"sourceType":"module"}