{"ast":null,"code":"var _jsxFileName = \"/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport FoodMenuPage from \"./pages/food-menu-page\";\nimport DrinksMenuPage from \"./pages/drinks-menu-page\";\nimport CheckoutPage from \"./pages/checkout-page\";\nimport OrderStatePage from \"./pages/order-state-page\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport BottomNavigator from \"./BottomNavigator\";\nimport Header from \"./Header\";\nimport \"./App.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { last } from \"ramda\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { split, HttpLink } from \"@apollo/client\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { Wrapper } from \"./pages/wrapper\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { theme } from \"./constants/theme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8000/graphql\"\n});\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:8000/graphql\",\n  options: {\n    reconnect: true // TODO AUTHENTICATION\n    // connectionParams: {\n    //   authToken: user.authToken,\n    // },\n\n  }\n}); // The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\n\nconst splitLink = split(_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  //uri: \"http://localhost:8000/graphql\",\n  link: splitLink,\n  fetchOptions: {\n    mode: \"no-cors\"\n  },\n  //credentials: \"same-origin\",\n  cache: new InMemoryCache()\n}); // Create a client\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  _s();\n\n  const [value, setValue] = React.useState(\"/\");\n  return /*#__PURE__*/_jsxDEV(QueryClientProvider, {\n    client: queryClient,\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(Provider, {\n        store: store,\n        children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n          theme: theme,\n          children: /*#__PURE__*/_jsxDEV(Wrapper, {\n            children: /*#__PURE__*/_jsxDEV(Router, {\n              children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"app-wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(Switch, {\n                  children: [/*#__PURE__*/_jsxDEV(Route, {\n                    path: \"/food\",\n                    children: /*#__PURE__*/_jsxDEV(FoodMenuPage, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 81,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Route, {\n                    path: \"/drinks\",\n                    children: /*#__PURE__*/_jsxDEV(DrinksMenuPage, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Route, {\n                    path: \"/cart\",\n                    children: /*#__PURE__*/_jsxDEV(CheckoutPage, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 87,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Route, {\n                    path: \"/orderInformation\",\n                    children: /*#__PURE__*/_jsxDEV(OrderStatePage, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(BottomNavigator, {\n                  onRouteChange: (event, newValue) => setValue(newValue),\n                  currentRoute: value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nJn3CbEoinfyPUhybEqV8Xms+Uo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/App.js"],"names":["React","BrowserRouter","Router","Route","Switch","FoodMenuPage","DrinksMenuPage","CheckoutPage","OrderStatePage","store","Provider","ThemeProvider","createTheme","BottomNavigator","Header","ApolloClient","InMemoryCache","ApolloProvider","last","QueryClient","QueryClientProvider","split","HttpLink","useSelector","useDispatch","getMainDefinition","Wrapper","WebSocketLink","theme","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","client","link","fetchOptions","mode","cache","queryClient","App","value","setValue","useState","event","newValue"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport FoodMenuPage from \"./pages/food-menu-page\";\nimport DrinksMenuPage from \"./pages/drinks-menu-page\";\nimport CheckoutPage from \"./pages/checkout-page\";\nimport OrderStatePage from \"./pages/order-state-page\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport BottomNavigator from \"./BottomNavigator\";\nimport Header from \"./Header\";\nimport \"./App.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { last } from \"ramda\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { split, HttpLink } from \"@apollo/client\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { Wrapper } from \"./pages/wrapper\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { theme } from \"./constants/theme\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8000/graphql\",\n});\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:8000/graphql\",\n  options: {\n    reconnect: true,\n    // TODO AUTHENTICATION\n    // connectionParams: {\n    //   authToken: user.authToken,\n    // },\n  },\n});\n\n// The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  //uri: \"http://localhost:8000/graphql\",\n  link: splitLink,\n  fetchOptions: {\n    mode: \"no-cors\",\n  },\n  //credentials: \"same-origin\",\n  cache: new InMemoryCache(),\n});\n\n// Create a client\nconst queryClient = new QueryClient();\n\nfunction App() {\n  const [value, setValue] = React.useState(\"/\");\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApolloProvider client={client}>\n        <Provider store={store}>\n          <ThemeProvider theme={theme}>\n            <Wrapper>\n              <Router>\n                <Header />\n                <div className=\"app-wrapper\">\n                  <Switch>\n                    <Route path=\"/food\">\n                      <FoodMenuPage />\n                    </Route>\n                    <Route path=\"/drinks\">\n                      <DrinksMenuPage />\n                    </Route>\n                    <Route path=\"/cart\">\n                      <CheckoutPage />\n                    </Route>\n                    <Route path=\"/orderInformation\">\n                      <OrderStatePage />\n                    </Route>\n                  </Switch>\n                  <BottomNavigator\n                    onRouteChange={(event, newValue) => setValue(newValue)}\n                    currentRoute={value}\n                  />\n                </div>\n              </Router>\n            </Wrapper>\n          </ThemeProvider>\n        </Provider>\n      </ApolloProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}