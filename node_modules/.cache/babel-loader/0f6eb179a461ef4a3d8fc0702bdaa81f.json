{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getAbortController, functionalUpdate, isValidTimeout, noop, replaceEqualDeep, timeUntilStale, ensureQueryKeyArray } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { getLogger } from './logger';\nimport { Retryer, isCancelledError } from './retryer'; // TYPES\n// CLASS\n\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.abortSignalConsumed = false;\n    this.hadObservers = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || this.getDefaultState(this.options);\n    this.state = this.initialState;\n    this.meta = config.meta;\n    this.scheduleGc();\n  }\n\n  var _proto = Query.prototype;\n\n  _proto.setOptions = function setOptions(options) {\n    var _this$options$cacheTi;\n\n    this.options = _extends({}, this.defaultOptions, options);\n    this.meta = options == null ? void 0 : options.meta; // Default to 5 minutes if not cache time is set\n\n    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);\n  };\n\n  _proto.setDefaultOptions = function setDefaultOptions(options) {\n    this.defaultOptions = options;\n  };\n\n  _proto.scheduleGc = function scheduleGc() {\n    var _this = this;\n\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(function () {\n        _this.optionalRemove();\n      }, this.cacheTime);\n    }\n  };\n\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    clearTimeout(this.gcTimeout);\n    this.gcTimeout = undefined;\n  };\n\n  _proto.optionalRemove = function optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.isFetching) {\n        if (this.hadObservers) {\n          this.scheduleGc();\n        }\n      } else {\n        this.cache.remove(this);\n      }\n    }\n  };\n\n  _proto.setData = function setData(updater, options) {\n    var _this$options$isDataE, _this$options;\n\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {\n      data = prevData;\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Set data and mark it as cached\n\n\n    this.dispatch({\n      data: data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt\n    });\n    return data;\n  };\n\n  _proto.setState = function setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state: state,\n      setStateOptions: setStateOptions\n    });\n  };\n\n  _proto.cancel = function cancel(options) {\n    var _this$retryer;\n\n    var promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  };\n\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.cancel({\n      silent: true\n    });\n  };\n\n  _proto.reset = function reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  };\n\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.options.enabled !== false;\n    });\n  };\n\n  _proto.isFetching = function isFetching() {\n    return this.state.isFetching;\n  };\n\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  };\n\n  _proto.onFocus = function onFocus() {\n    var _this$retryer2;\n\n    var observer = this.observers.find(function (x) {\n      return x.shouldFetchOnWindowFocus();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  };\n\n  _proto.onOnline = function onOnline() {\n    var _this$retryer3;\n\n    var observer = this.observers.find(function (x) {\n      return x.shouldFetchOnReconnect();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  };\n\n  _proto.addObserver = function addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer);\n      this.hadObservers = true; // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer: observer\n      });\n    }\n  };\n\n  _proto.removeObserver = function removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc();\n        } else {\n          this.cache.remove(this);\n        }\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer: observer\n      });\n    }\n  };\n\n  _proto.getObserversCount = function getObserversCount() {\n    return this.observers.length;\n  };\n\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  };\n\n  _proto.fetch = function fetch(options, fetchOptions) {\n    var _this2 = this,\n        _this$options$behavio,\n        _context$fetchOptions,\n        _abortController$abor;\n\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4; // make sure that retries that were potentially cancelled due to unmounts can continue\n\n\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      var observer = this.observers.find(function (x) {\n        return x.options.queryFn;\n      });\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    var queryKey = ensureQueryKeyArray(this.queryKey);\n    var abortController = getAbortController(); // Create query function context\n\n    var queryFnContext = {\n      queryKey: queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    };\n    Object.defineProperty(queryFnContext, 'signal', {\n      enumerable: true,\n      get: function get() {\n        if (abortController) {\n          _this2.abortSignalConsumed = true;\n          return abortController.signal;\n        }\n\n        return undefined;\n      }\n    }); // Create fetch function\n\n    var fetchFn = function fetchFn() {\n      if (!_this2.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      _this2.abortSignalConsumed = false;\n      return _this2.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    var context = {\n      fetchOptions: fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn: fetchFn,\n      meta: this.meta\n    };\n\n    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {\n      var _this$options$behavio2;\n\n      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);\n    } // Store state in case the current fetch needs to be reverted\n\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    } // Try to fetch the data\n\n\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : (_abortController$abor = abortController.abort) == null ? void 0 : _abortController$abor.bind(abortController),\n      onSuccess: function onSuccess(data) {\n        _this2.setData(data); // Notify cache callback\n\n\n        _this2.cache.config.onSuccess == null ? void 0 : _this2.cache.config.onSuccess(data, _this2); // Remove query after fetching if cache time is 0\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onError: function onError(error) {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          _this2.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          _this2.cache.config.onError == null ? void 0 : _this2.cache.config.onError(error, _this2); // Log error\n\n          getLogger().error(error);\n        } // Remove query after fetching if cache time is 0\n\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onFail: function onFail() {\n        _this2.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: function onPause() {\n        _this2.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: function onContinue() {\n        _this2.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  };\n\n  _proto.dispatch = function dispatch(action) {\n    var _this3 = this;\n\n    this.state = this.reducer(this.state, action);\n    notifyManager.batch(function () {\n      _this3.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n\n      _this3.cache.notify({\n        query: _this3,\n        type: 'queryUpdated',\n        action: action\n      });\n    });\n  };\n\n  _proto.getDefaultState = function getDefaultState(options) {\n    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n    var hasInitialData = typeof options.initialData !== 'undefined';\n    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    var hasData = typeof data !== 'undefined';\n    return {\n      data: data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle'\n    };\n  };\n\n  _proto.reducer = function reducer(state, action) {\n    var _action$meta, _action$dataUpdatedAt;\n\n    switch (action.type) {\n      case 'failed':\n        return _extends({}, state, {\n          fetchFailureCount: state.fetchFailureCount + 1\n        });\n\n      case 'pause':\n        return _extends({}, state, {\n          isPaused: true\n        });\n\n      case 'continue':\n        return _extends({}, state, {\n          isPaused: false\n        });\n\n      case 'fetch':\n        return _extends({}, state, {\n          fetchFailureCount: 0,\n          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n          isFetching: true,\n          isPaused: false\n        }, !state.dataUpdatedAt && {\n          error: null,\n          status: 'loading'\n        });\n\n      case 'success':\n        return _extends({}, state, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success'\n        });\n\n      case 'error':\n        var error = action.error;\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return _extends({}, this.revertState);\n        }\n\n        return _extends({}, state, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error'\n        });\n\n      case 'invalidate':\n        return _extends({}, state, {\n          isInvalidated: true\n        });\n\n      case 'setState':\n        return _extends({}, state, action.state);\n\n      default:\n        return state;\n    }\n  };\n\n  return Query;\n}();","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/react-query/es/core/query.js"],"names":["_extends","getAbortController","functionalUpdate","isValidTimeout","noop","replaceEqualDeep","timeUntilStale","ensureQueryKeyArray","notifyManager","getLogger","Retryer","isCancelledError","Query","config","abortSignalConsumed","hadObservers","defaultOptions","setOptions","options","observers","cache","queryKey","queryHash","initialState","state","getDefaultState","meta","scheduleGc","_proto","prototype","_this$options$cacheTi","cacheTime","Math","max","setDefaultOptions","_this","clearGcTimeout","gcTimeout","setTimeout","optionalRemove","clearTimeout","undefined","length","isFetching","remove","setData","updater","_this$options$isDataE","_this$options","prevData","data","isDataEqual","call","structuralSharing","dispatch","type","dataUpdatedAt","updatedAt","setState","setStateOptions","cancel","_this$retryer","promise","retryer","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","_this$retryer2","find","x","shouldFetchOnWindowFocus","refetch","continue","onOnline","_this$retryer3","shouldFetchOnReconnect","addObserver","indexOf","push","notify","query","removeObserver","filter","isTransportCancelable","revert","cancelRetry","getObserversCount","invalidate","fetch","fetchOptions","_this2","_this$options$behavio","_context$fetchOptions","_abortController$abor","cancelRefetch","_this$retryer4","continueRetry","queryFn","abortController","queryFnContext","pageParam","Object","defineProperty","enumerable","get","signal","fetchFn","reject","context","behavior","onFetch","_this$options$behavio2","revertState","fetchMeta","_context$fetchOptions2","fn","abort","bind","onSuccess","onError","error","onFail","onPause","onContinue","retry","retryDelay","action","_this3","reducer","batch","forEach","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","fetchFailureCount","isPaused","status","_action$meta","_action$dataUpdatedAt"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getAbortController, functionalUpdate, isValidTimeout, noop, replaceEqualDeep, timeUntilStale, ensureQueryKeyArray } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { getLogger } from './logger';\nimport { Retryer, isCancelledError } from './retryer'; // TYPES\n\n// CLASS\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.abortSignalConsumed = false;\n    this.hadObservers = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || this.getDefaultState(this.options);\n    this.state = this.initialState;\n    this.meta = config.meta;\n    this.scheduleGc();\n  }\n\n  var _proto = Query.prototype;\n\n  _proto.setOptions = function setOptions(options) {\n    var _this$options$cacheTi;\n\n    this.options = _extends({}, this.defaultOptions, options);\n    this.meta = options == null ? void 0 : options.meta; // Default to 5 minutes if not cache time is set\n\n    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);\n  };\n\n  _proto.setDefaultOptions = function setDefaultOptions(options) {\n    this.defaultOptions = options;\n  };\n\n  _proto.scheduleGc = function scheduleGc() {\n    var _this = this;\n\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(function () {\n        _this.optionalRemove();\n      }, this.cacheTime);\n    }\n  };\n\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    clearTimeout(this.gcTimeout);\n    this.gcTimeout = undefined;\n  };\n\n  _proto.optionalRemove = function optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.isFetching) {\n        if (this.hadObservers) {\n          this.scheduleGc();\n        }\n      } else {\n        this.cache.remove(this);\n      }\n    }\n  };\n\n  _proto.setData = function setData(updater, options) {\n    var _this$options$isDataE, _this$options;\n\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {\n      data = prevData;\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Set data and mark it as cached\n\n\n    this.dispatch({\n      data: data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt\n    });\n    return data;\n  };\n\n  _proto.setState = function setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state: state,\n      setStateOptions: setStateOptions\n    });\n  };\n\n  _proto.cancel = function cancel(options) {\n    var _this$retryer;\n\n    var promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  };\n\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.cancel({\n      silent: true\n    });\n  };\n\n  _proto.reset = function reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  };\n\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.options.enabled !== false;\n    });\n  };\n\n  _proto.isFetching = function isFetching() {\n    return this.state.isFetching;\n  };\n\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  };\n\n  _proto.onFocus = function onFocus() {\n    var _this$retryer2;\n\n    var observer = this.observers.find(function (x) {\n      return x.shouldFetchOnWindowFocus();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  };\n\n  _proto.onOnline = function onOnline() {\n    var _this$retryer3;\n\n    var observer = this.observers.find(function (x) {\n      return x.shouldFetchOnReconnect();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  };\n\n  _proto.addObserver = function addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer);\n      this.hadObservers = true; // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer: observer\n      });\n    }\n  };\n\n  _proto.removeObserver = function removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc();\n        } else {\n          this.cache.remove(this);\n        }\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer: observer\n      });\n    }\n  };\n\n  _proto.getObserversCount = function getObserversCount() {\n    return this.observers.length;\n  };\n\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  };\n\n  _proto.fetch = function fetch(options, fetchOptions) {\n    var _this2 = this,\n        _this$options$behavio,\n        _context$fetchOptions,\n        _abortController$abor;\n\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      var observer = this.observers.find(function (x) {\n        return x.options.queryFn;\n      });\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    var queryKey = ensureQueryKeyArray(this.queryKey);\n    var abortController = getAbortController(); // Create query function context\n\n    var queryFnContext = {\n      queryKey: queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    };\n    Object.defineProperty(queryFnContext, 'signal', {\n      enumerable: true,\n      get: function get() {\n        if (abortController) {\n          _this2.abortSignalConsumed = true;\n          return abortController.signal;\n        }\n\n        return undefined;\n      }\n    }); // Create fetch function\n\n    var fetchFn = function fetchFn() {\n      if (!_this2.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      _this2.abortSignalConsumed = false;\n      return _this2.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    var context = {\n      fetchOptions: fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn: fetchFn,\n      meta: this.meta\n    };\n\n    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {\n      var _this$options$behavio2;\n\n      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);\n    } // Store state in case the current fetch needs to be reverted\n\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    } // Try to fetch the data\n\n\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : (_abortController$abor = abortController.abort) == null ? void 0 : _abortController$abor.bind(abortController),\n      onSuccess: function onSuccess(data) {\n        _this2.setData(data); // Notify cache callback\n\n\n        _this2.cache.config.onSuccess == null ? void 0 : _this2.cache.config.onSuccess(data, _this2); // Remove query after fetching if cache time is 0\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onError: function onError(error) {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          _this2.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          _this2.cache.config.onError == null ? void 0 : _this2.cache.config.onError(error, _this2); // Log error\n\n          getLogger().error(error);\n        } // Remove query after fetching if cache time is 0\n\n\n        if (_this2.cacheTime === 0) {\n          _this2.optionalRemove();\n        }\n      },\n      onFail: function onFail() {\n        _this2.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: function onPause() {\n        _this2.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: function onContinue() {\n        _this2.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  };\n\n  _proto.dispatch = function dispatch(action) {\n    var _this3 = this;\n\n    this.state = this.reducer(this.state, action);\n    notifyManager.batch(function () {\n      _this3.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n\n      _this3.cache.notify({\n        query: _this3,\n        type: 'queryUpdated',\n        action: action\n      });\n    });\n  };\n\n  _proto.getDefaultState = function getDefaultState(options) {\n    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n    var hasInitialData = typeof options.initialData !== 'undefined';\n    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    var hasData = typeof data !== 'undefined';\n    return {\n      data: data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle'\n    };\n  };\n\n  _proto.reducer = function reducer(state, action) {\n    var _action$meta, _action$dataUpdatedAt;\n\n    switch (action.type) {\n      case 'failed':\n        return _extends({}, state, {\n          fetchFailureCount: state.fetchFailureCount + 1\n        });\n\n      case 'pause':\n        return _extends({}, state, {\n          isPaused: true\n        });\n\n      case 'continue':\n        return _extends({}, state, {\n          isPaused: false\n        });\n\n      case 'fetch':\n        return _extends({}, state, {\n          fetchFailureCount: 0,\n          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n          isFetching: true,\n          isPaused: false\n        }, !state.dataUpdatedAt && {\n          error: null,\n          status: 'loading'\n        });\n\n      case 'success':\n        return _extends({}, state, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success'\n        });\n\n      case 'error':\n        var error = action.error;\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return _extends({}, this.revertState);\n        }\n\n        return _extends({}, state, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error'\n        });\n\n      case 'invalidate':\n        return _extends({}, state, {\n          isInvalidated: true\n        });\n\n      case 'setState':\n        return _extends({}, state, action.state);\n\n      default:\n        return state;\n    }\n  };\n\n  return Query;\n}();"]},"metadata":{},"sourceType":"module"}