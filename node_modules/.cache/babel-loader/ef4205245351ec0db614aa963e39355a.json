{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { propEq } from \"ramda\";\nexport const mealsSlice = createSlice({\n  name: \"meals\",\n  initialState: {\n    meals: [],\n    mealOrder: []\n  },\n  reducers: {\n    cacheMeals: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.meals = payload;\n    },\n    addToCart: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //   if (state.mealOrder.length === 0) {\n      //     state.mealOrder = [payload];\n      //   } else {\n      const index = state.mealOrder.findIndex(meal => meal.id === payload.id);\n\n      if (index !== -1) {\n        state.mealOrder[index] = payload;\n      } else {\n        state.mealOrder = [...state.mealOrder, payload];\n      } //}\n\n    },\n    incrementCount: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.drinks[state.drinks.findIndex(drink => drink.id === payload)].count += 1;\n    },\n    decrementCount: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.drinks[state.drinks.findIndex(drink => drink.id === payload)].count -= 1;\n    } // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToCart,\n  decrement,\n  incrementCount,\n  decrementCount,\n  cacheMeals\n} = mealsSlice.actions;\nexport default mealsSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/pages/mealsSlice.js"],"names":["createSlice","propEq","mealsSlice","name","initialState","meals","mealOrder","reducers","cacheMeals","state","payload","addToCart","index","findIndex","meal","id","incrementCount","drinks","drink","count","decrementCount","decrement","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,OAAO,MAAMC,UAAU,GAAGF,WAAW,CAAC;AACpCG,EAAAA,IAAI,EAAE,OAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,SAAS,EAAE;AAFC,GAFsB;AAMpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAClCD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,OAAd;AACD,KAHO;AAIRC,IAAAA,SAAS,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAME,KAAK,GAAGH,KAAK,CAACH,SAAN,CAAgBO,SAAhB,CAA2BC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAAxD,CAAd;;AACA,UAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBH,QAAAA,KAAK,CAACH,SAAN,CAAgBM,KAAhB,IAAyBF,OAAzB;AACD,OAFD,MAEO;AACLD,QAAAA,KAAK,CAACH,SAAN,GAAkB,CAAC,GAAGG,KAAK,CAACH,SAAV,EAAqBI,OAArB,CAAlB;AACD,OAbgC,CAcjC;;AACD,KAnBO;AAoBRM,IAAAA,cAAc,EAAE,CAACP,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACtCD,MAAAA,KAAK,CAACQ,MAAN,CACER,KAAK,CAACQ,MAAN,CAAaJ,SAAb,CAAwBK,KAAD,IAAWA,KAAK,CAACH,EAAN,KAAaL,OAA/C,CADF,EAEES,KAFF,IAEW,CAFX;AAGD,KAxBO;AA0BRC,IAAAA,cAAc,EAAE,CAACX,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACtCD,MAAAA,KAAK,CAACQ,MAAN,CACER,KAAK,CAACQ,MAAN,CAAaJ,SAAb,CAAwBK,KAAD,IAAWA,KAAK,CAACH,EAAN,KAAaL,OAA/C,CADF,EAEES,KAFF,IAEW,CAFX;AAGD,KA9BO,CA+BR;AACA;AACA;AACA;AACA;AACA;;AApCQ;AAN0B,CAAD,CAA9B,C,CA8CP;;AACA,OAAO,MAAM;AACXR,EAAAA,SADW;AAEXU,EAAAA,SAFW;AAGXL,EAAAA,cAHW;AAIXI,EAAAA,cAJW;AAKXZ,EAAAA;AALW,IAMTN,UAAU,CAACoB,OANR;AAQP,eAAepB,UAAU,CAACqB,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { propEq } from \"ramda\";\n\nexport const mealsSlice = createSlice({\n  name: \"meals\",\n  initialState: {\n    meals: [],\n    mealOrder: [],\n  },\n  reducers: {\n    cacheMeals: (state, { payload }) => {\n      state.meals = payload;\n    },\n    addToCart: (state, { payload }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //   if (state.mealOrder.length === 0) {\n      //     state.mealOrder = [payload];\n      //   } else {\n      const index = state.mealOrder.findIndex((meal) => meal.id === payload.id);\n      if (index !== -1) {\n        state.mealOrder[index] = payload;\n      } else {\n        state.mealOrder = [...state.mealOrder, payload];\n      }\n      //}\n    },\n    incrementCount: (state, { payload }) => {\n      state.drinks[\n        state.drinks.findIndex((drink) => drink.id === payload)\n      ].count += 1;\n    },\n\n    decrementCount: (state, { payload }) => {\n      state.drinks[\n        state.drinks.findIndex((drink) => drink.id === payload)\n      ].count -= 1;\n    },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  addToCart,\n  decrement,\n  incrementCount,\n  decrementCount,\n  cacheMeals,\n} = mealsSlice.actions;\n\nexport default mealsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}