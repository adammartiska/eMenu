{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\n/** Describes whether is Meal or Drink */\nexport let MealTypeEnumType;\n\n(function (MealTypeEnumType) {\n  MealTypeEnumType[\"Drink\"] = \"DRINK\";\n  MealTypeEnumType[\"Meal\"] = \"MEAL\";\n})(MealTypeEnumType || (MealTypeEnumType = {}));\n\n/** Describes state of order */\nexport let OrderStateEnumType;\n\n(function (OrderStateEnumType) {\n  OrderStateEnumType[\"Closed\"] = \"CLOSED\";\n  OrderStateEnumType[\"Open\"] = \"OPEN\";\n})(OrderStateEnumType || (OrderStateEnumType = {}));\n\nexport const MealsDocument = gql`\n    query Meals {\n  meals {\n    id\n    name\n    price\n  }\n}\n    `;\n/**\n * __useMealsQuery__\n *\n * To run a query within a React component, call `useMealsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMealsQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MealsDocument, options);\n}\n\n_s(useMealsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMealsLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MealsDocument, options);\n}\n\n_s2(useMealsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const DrinksDocument = gql`\n    query Drinks {\n  drinks {\n    id\n    name\n    price\n  }\n}\n    `;\n/**\n * __useDrinksQuery__\n *\n * To run a query within a React component, call `useDrinksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDrinksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDrinksQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useDrinksQuery(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(DrinksDocument, options);\n}\n\n_s3(useDrinksQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useDrinksLazyQuery(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(DrinksDocument, options);\n}\n\n_s4(useDrinksLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const CreateSuborderDocument = gql`\n    mutation CreateSuborder($tableId: Int!, $meals: [MealInputType], $drinks: [MealInputType], $token: String!) {\n  createSuborder(\n    suborder: {tableId: $tableId, meals: $meals, drinks: $drinks}\n    token: $token\n  ) {\n    id\n    token\n    tableId\n  }\n}\n    `;\n\n/**\n * __useCreateSuborderMutation__\n *\n * To run a mutation, you first call `useCreateSuborderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSuborderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSuborderMutation, { data, loading, error }] = useCreateSuborderMutation({\n *   variables: {\n *      tableId: // value for 'tableId'\n *      meals: // value for 'meals'\n *      drinks: // value for 'drinks'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useCreateSuborderMutation(baseOptions) {\n  _s5();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(CreateSuborderDocument, options);\n}\n\n_s5(useCreateSuborderMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","MealTypeEnumType","OrderStateEnumType","MealsDocument","useMealsQuery","baseOptions","options","useQuery","useMealsLazyQuery","useLazyQuery","DrinksDocument","useDrinksQuery","useDrinksLazyQuery","CreateSuborderDocument","useCreateSuborderMutation","useMutation"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AAmDA;AACA,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAYZ;AACA,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AA0DZ,OAAO,MAAMC,aAAa,GAAGL,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,aAAT,CAAuBC,WAAvB,EAA+F;AAAA;;AAC9F,QAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;AAAoB,OAAGK;AAAvB,GAAhB;AACA,SAAON,MAAM,CAACQ,QAAP,CAAiDJ,aAAjD,EAAgEG,OAAhE,CAAP;AACD;;GAHSF,a;UAEDL,MAAM,CAACQ,Q;;;AAEtB,OAAO,SAASC,iBAAT,CAA2BH,WAA3B,EAAuG;AAAA;;AACpG,QAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;AAAoB,OAAGK;AAAvB,GAAhB;AACA,SAAON,MAAM,CAACU,YAAP,CAAqDN,aAArD,EAAoEG,OAApE,CAAP;AACD;;IAHOE,iB;UAECT,MAAM,CAACU,Y;;;AAKxB,OAAO,MAAMC,cAAc,GAAGZ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,cAAT,CAAwBN,WAAxB,EAAkG;AAAA;;AACjG,QAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;AAAoB,OAAGK;AAAvB,GAAhB;AACA,SAAON,MAAM,CAACQ,QAAP,CAAmDG,cAAnD,EAAmEJ,OAAnE,CAAP;AACD;;IAHSK,c;UAEDZ,MAAM,CAACQ,Q;;;AAEtB,OAAO,SAASK,kBAAT,CAA4BP,WAA5B,EAA0G;AAAA;;AACvG,QAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;AAAoB,OAAGK;AAAvB,GAAhB;AACA,SAAON,MAAM,CAACU,YAAP,CAAuDC,cAAvD,EAAuEJ,OAAvE,CAAP;AACD;;IAHOM,kB;UAECb,MAAM,CAACU,Y;;;AAKxB,OAAO,MAAMI,sBAAsB,GAAGf,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAXO;;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,yBAAT,CAAmCT,WAAnC,EAAsI;AAAA;;AACrI,QAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;AAAoB,OAAGK;AAAvB,GAAhB;AACA,SAAON,MAAM,CAACgB,WAAP,CAA4EF,sBAA5E,EAAoGP,OAApG,CAAP;AACD;;IAHSQ,yB;UAEDf,MAAM,CAACgB,W","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type CreateSuborder = {\n  __typename?: 'CreateSuborder';\n  createSuborder?: Maybe<OrderType>;\n};\n\n\nexport type CreateSuborderCreateSuborderArgs = {\n  suborder: SuborderInputType;\n  token: Scalars['String'];\n};\n\nexport type DrinkType = {\n  __typename?: 'DrinkType';\n  /** Amount of drink measured in stored unit */\n  amount: Scalars['Float'];\n  /** Drink Id */\n  id: Scalars['Int'];\n  /** Drink Name */\n  name: Scalars['String'];\n  /** Drink Price */\n  price: Scalars['Float'];\n  type?: Maybe<MealTypeEnumType>;\n  /** Unit in which is Amount stated */\n  unit: Scalars['String'];\n};\n\nexport type MealInputType = {\n  count: Scalars['Int'];\n  id: Scalars['Int'];\n};\n\nexport type MealType = {\n  __typename?: 'MealType';\n  /** Meal id */\n  id: Scalars['Int'];\n  /** Meal name */\n  name: Scalars['String'];\n  /** Meal price */\n  price: Scalars['Float'];\n  type?: Maybe<MealTypeEnumType>;\n};\n\n/** Describes whether is Meal or Drink */\nexport enum MealTypeEnumType {\n  Drink = 'DRINK',\n  Meal = 'MEAL'\n}\n\n\n\nexport type MealsQueryOrderByIdArgs = {\n  orderId: Scalars['Int'];\n  token: Scalars['String'];\n};\n\n/** Describes state of order */\nexport enum OrderStateEnumType {\n  Closed = 'CLOSED',\n  Open = 'OPEN'\n}\n\nexport type OrderType = {\n  __typename?: 'OrderType';\n  /** Price */\n  finalPrice: Scalars['Float'];\n  /** Order id */\n  id: Scalars['Int'];\n  orderState?: Maybe<OrderStateEnumType>;\n  suborders?: Maybe<Array<Maybe<SuborderType>>>;\n  /** Table id */\n  tableId: Scalars['Int'];\n  /** Token */\n  token: Scalars['String'];\n};\n\nexport type SuborderInputType = {\n  drinks?: Maybe<Array<Maybe<MealInputType>>>;\n  meals?: Maybe<Array<Maybe<MealInputType>>>;\n  tableId: Scalars['Int'];\n};\n\nexport type SuborderType = {\n  __typename?: 'SuborderType';\n  drinks?: Maybe<Array<Maybe<DrinkType>>>;\n  /** Suborder id */\n  id: Scalars['Int'];\n  meals?: Maybe<Array<Maybe<MealType>>>;\n  /** Order id */\n  orderId: Scalars['Int'];\n  /** Table id */\n  tableId: Scalars['Int'];\n};\n\nexport type MealsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MealsQuery = { __typename?: 'MealsQuery', meals?: Array<{ __typename?: 'MealType', id: number, name: string, price: number } | null | undefined> | null | undefined };\n\nexport type DrinksQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type DrinksQuery = { __typename?: 'MealsQuery', drinks?: Array<{ __typename?: 'DrinkType', id: number, name: string, price: number } | null | undefined> | null | undefined };\n\nexport type CreateSuborderMutationVariables = Exact<{\n  tableId: Scalars['Int'];\n  meals?: Maybe<Array<Maybe<MealInputType>> | Maybe<MealInputType>>;\n  drinks?: Maybe<Array<Maybe<MealInputType>> | Maybe<MealInputType>>;\n  token: Scalars['String'];\n}>;\n\n\nexport type CreateSuborderMutation = { __typename?: 'CreateSuborder', createSuborder?: { __typename?: 'OrderType', id: number, token: string, tableId: number } | null | undefined };\n\n\nexport const MealsDocument = gql`\n    query Meals {\n  meals {\n    id\n    name\n    price\n  }\n}\n    `;\n\n/**\n * __useMealsQuery__\n *\n * To run a query within a React component, call `useMealsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMealsQuery(baseOptions?: Apollo.QueryHookOptions<MealsQuery, MealsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MealsQuery, MealsQueryVariables>(MealsDocument, options);\n      }\nexport function useMealsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MealsQuery, MealsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MealsQuery, MealsQueryVariables>(MealsDocument, options);\n        }\nexport type MealsQueryHookResult = ReturnType<typeof useMealsQuery>;\nexport type MealsLazyQueryHookResult = ReturnType<typeof useMealsLazyQuery>;\nexport type MealsQueryResult = Apollo.QueryResult<MealsQuery, MealsQueryVariables>;\nexport const DrinksDocument = gql`\n    query Drinks {\n  drinks {\n    id\n    name\n    price\n  }\n}\n    `;\n\n/**\n * __useDrinksQuery__\n *\n * To run a query within a React component, call `useDrinksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDrinksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDrinksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDrinksQuery(baseOptions?: Apollo.QueryHookOptions<DrinksQuery, DrinksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DrinksQuery, DrinksQueryVariables>(DrinksDocument, options);\n      }\nexport function useDrinksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DrinksQuery, DrinksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DrinksQuery, DrinksQueryVariables>(DrinksDocument, options);\n        }\nexport type DrinksQueryHookResult = ReturnType<typeof useDrinksQuery>;\nexport type DrinksLazyQueryHookResult = ReturnType<typeof useDrinksLazyQuery>;\nexport type DrinksQueryResult = Apollo.QueryResult<DrinksQuery, DrinksQueryVariables>;\nexport const CreateSuborderDocument = gql`\n    mutation CreateSuborder($tableId: Int!, $meals: [MealInputType], $drinks: [MealInputType], $token: String!) {\n  createSuborder(\n    suborder: {tableId: $tableId, meals: $meals, drinks: $drinks}\n    token: $token\n  ) {\n    id\n    token\n    tableId\n  }\n}\n    `;\nexport type CreateSuborderMutationFn = Apollo.MutationFunction<CreateSuborderMutation, CreateSuborderMutationVariables>;\n\n/**\n * __useCreateSuborderMutation__\n *\n * To run a mutation, you first call `useCreateSuborderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSuborderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSuborderMutation, { data, loading, error }] = useCreateSuborderMutation({\n *   variables: {\n *      tableId: // value for 'tableId'\n *      meals: // value for 'meals'\n *      drinks: // value for 'drinks'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useCreateSuborderMutation(baseOptions?: Apollo.MutationHookOptions<CreateSuborderMutation, CreateSuborderMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSuborderMutation, CreateSuborderMutationVariables>(CreateSuborderDocument, options);\n      }\nexport type CreateSuborderMutationHookResult = ReturnType<typeof useCreateSuborderMutation>;\nexport type CreateSuborderMutationResult = Apollo.MutationResult<CreateSuborderMutation>;\nexport type CreateSuborderMutationOptions = Apollo.BaseMutationOptions<CreateSuborderMutation, CreateSuborderMutationVariables>;"]},"metadata":{},"sourceType":"module"}