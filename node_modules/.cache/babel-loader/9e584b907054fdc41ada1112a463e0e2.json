{"ast":null,"code":"import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\n\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/language/location.mjs"],"names":["invariant","LineRegExp","getLocation","source","position","lastLineStart","line","match","body","matchAll","index","length","column"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,MAAMC,UAAU,GAAG,cAAnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC5C,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,OAAK,MAAMC,KAAX,IAAoBJ,MAAM,CAACK,IAAP,CAAYC,QAAZ,CAAqBR,UAArB,CAApB,EAAsD;AACpD,WAAOM,KAAK,CAACG,KAAb,KAAuB,QAAvB,IAAmCV,SAAS,CAAC,KAAD,CAA5C;;AAEA,QAAIO,KAAK,CAACG,KAAN,IAAeN,QAAnB,EAA6B;AAC3B;AACD;;AAEDC,IAAAA,aAAa,GAAGE,KAAK,CAACG,KAAN,GAAcH,KAAK,CAAC,CAAD,CAAL,CAASI,MAAvC;AACAL,IAAAA,IAAI,IAAI,CAAR;AACD;;AAED,SAAO;AACLA,IAAAA,IADK;AAELM,IAAAA,MAAM,EAAER,QAAQ,GAAG,CAAX,GAAeC;AAFlB,GAAP;AAID","sourcesContent":["import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}