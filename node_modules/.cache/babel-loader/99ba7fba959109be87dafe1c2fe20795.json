{"ast":null,"code":"import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\n\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      }\n\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(`There can be only one input field named \"${fieldName}\".`, [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"],"names":["invariant","GraphQLError","UniqueInputFieldNamesRule","context","knownNameStack","knownNames","Object","create","ObjectValue","enter","push","leave","prevKnownNames","pop","ObjectField","node","fieldName","name","value","reportError"],"mappings":"AAAA,SAASA,SAAT,QAA0B,6BAA1B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;AACjD,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;AACA,SAAO;AACLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,GAAG;AACNL,QAAAA,cAAc,CAACM,IAAf,CAAoBL,UAApB;AACAA,QAAAA,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;AACD,OAJU;;AAMXI,MAAAA,KAAK,GAAG;AACN,cAAMC,cAAc,GAAGR,cAAc,CAACS,GAAf,EAAvB;AACAD,QAAAA,cAAc,IAAIZ,SAAS,CAAC,KAAD,CAA3B;AACAK,QAAAA,UAAU,GAAGO,cAAb;AACD;;AAVU,KADR;;AAcLE,IAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,YAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA5B;;AAEA,UAAIb,UAAU,CAACW,SAAD,CAAd,EAA2B;AACzBb,QAAAA,OAAO,CAACgB,WAAR,CACE,IAAIlB,YAAJ,CACG,4CAA2Ce,SAAU,IADxD,EAEE,CAACX,UAAU,CAACW,SAAD,CAAX,EAAwBD,IAAI,CAACE,IAA7B,CAFF,CADF;AAMD,OAPD,MAOO;AACLZ,QAAAA,UAAU,CAACW,SAAD,CAAV,GAAwBD,IAAI,CAACE,IAA7B;AACD;AACF;;AA3BI,GAAP;AA6BD","sourcesContent":["import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            [knownNames[fieldName], node.name],\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}