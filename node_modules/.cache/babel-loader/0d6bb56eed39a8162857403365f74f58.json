{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\n/** Describes state of order */\nexport let OrderStateEnumType;\n\n(function (OrderStateEnumType) {\n  OrderStateEnumType[\"Closed\"] = \"CLOSED\";\n  OrderStateEnumType[\"Open\"] = \"OPEN\";\n  OrderStateEnumType[\"Waiting\"] = \"WAITING\";\n})(OrderStateEnumType || (OrderStateEnumType = {}));\n\nexport const MealsDocument = gql`\n  query Meals {\n    meals {\n      id\n      name\n      price\n    }\n  }\n`;\n/**\n * __useMealsQuery__\n *\n * To run a query within a React component, call `useMealsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMealsQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MealsDocument, options);\n}\n\n_s(useMealsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMealsLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MealsDocument, options);\n}\n\n_s2(useMealsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const DrinksDocument = gql`\n  query Drinks {\n    drinks {\n      id\n      name\n      price\n      amount\n    }\n  }\n`;\n/**\n * __useDrinksQuery__\n *\n * To run a query within a React component, call `useDrinksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDrinksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDrinksQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useDrinksQuery(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(DrinksDocument, options);\n}\n\n_s3(useDrinksQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useDrinksLazyQuery(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(DrinksDocument, options);\n}\n\n_s4(useDrinksLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const CreateSuborderDocument = gql`\n  mutation CreateSuborder(\n    $tableId: Int!\n    $meals: [MealInputType]\n    $drinks: [MealInputType]\n    $token: String!\n  ) {\n    createSuborder(\n      suborder: { tableId: $tableId, meals: $meals, drinks: $drinks }\n      token: $token\n    ) {\n      id\n      token\n      tableId\n    }\n  }\n`;\n\n/**\n * __useCreateSuborderMutation__\n *\n * To run a mutation, you first call `useCreateSuborderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSuborderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSuborderMutation, { data, loading, error }] = useCreateSuborderMutation({\n *   variables: {\n *      tableId: // value for 'tableId'\n *      meals: // value for 'meals'\n *      drinks: // value for 'drinks'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useCreateSuborderMutation(baseOptions) {\n  _s5();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(CreateSuborderDocument, options);\n}\n\n_s5(useCreateSuborderMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport const OrderChangedSubscriptionDocument = gql`\n  subscription OrderChangedSubscription($orderId: Int!, $token: String!) {\n    orderChanged(orderId: $orderId, token: $token) {\n      id\n      token\n      orderState\n      suborders {\n        meals {\n          id\n          name\n          price\n        }\n        drinks {\n          id\n          name\n          price\n        }\n      }\n      finalPrice\n    }\n  }\n`;\n/**\n * __useOrderChangedSubscriptionSubscription__\n *\n * To run a query within a React component, call `useOrderChangedSubscriptionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useOrderChangedSubscriptionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOrderChangedSubscriptionSubscription({\n *   variables: {\n *      orderId: // value for 'orderId'\n *      token: // value for 'token'\n *   },\n * });\n */\n\nexport function useOrderChangedSubscriptionSubscription(baseOptions) {\n  _s6();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useSubscription(OrderChangedSubscriptionDocument, options);\n}\n\n_s6(useOrderChangedSubscriptionSubscription, \"wpUHqjcXqLAwY/8SnoVwGjhIUKk=\", false, function () {\n  return [Apollo.useSubscription];\n});","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","OrderStateEnumType","MealsDocument","useMealsQuery","baseOptions","options","useQuery","useMealsLazyQuery","useLazyQuery","DrinksDocument","useDrinksQuery","useDrinksLazyQuery","CreateSuborderDocument","useCreateSuborderMutation","useMutation","OrderChangedSubscriptionDocument","useOrderChangedSubscriptionSubscription","useSubscription"],"mappings":";;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAWA,MAAMC,cAAc,GAAG,EAAvB;AACA;;AAsEA;AACA,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AA8JZ,OAAO,MAAMC,aAAa,GAAGJ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,aAAT,CACLC,WADK,EAEL;AAAA;;AACA,QAAMC,OAAO,GAAG,EAAE,GAAGL,cAAL;AAAqB,OAAGI;AAAxB,GAAhB;AACA,SAAOL,MAAM,CAACO,QAAP,CACLJ,aADK,EAELG,OAFK,CAAP;AAID;;GAReF,a;UAIPJ,MAAM,CAACO,Q;;;AAKhB,OAAO,SAASC,iBAAT,CACLH,WADK,EAEL;AAAA;;AACA,QAAMC,OAAO,GAAG,EAAE,GAAGL,cAAL;AAAqB,OAAGI;AAAxB,GAAhB;AACA,SAAOL,MAAM,CAACS,YAAP,CACLN,aADK,EAELG,OAFK,CAAP;AAID;;IAReE,iB;UAIPR,MAAM,CAACS,Y;;;AAWhB,OAAO,MAAMC,cAAc,GAAGX,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,cAAT,CACLN,WADK,EAEL;AAAA;;AACA,QAAMC,OAAO,GAAG,EAAE,GAAGL,cAAL;AAAqB,OAAGI;AAAxB,GAAhB;AACA,SAAOL,MAAM,CAACO,QAAP,CACLG,cADK,EAELJ,OAFK,CAAP;AAID;;IAReK,c;UAIPX,MAAM,CAACO,Q;;;AAKhB,OAAO,SAASK,kBAAT,CACLP,WADK,EAEL;AAAA;;AACA,QAAMC,OAAO,GAAG,EAAE,GAAGL,cAAL;AAAqB,OAAGI;AAAxB,GAAhB;AACA,SAAOL,MAAM,CAACS,YAAP,CACLC,cADK,EAELJ,OAFK,CAAP;AAID;;IAReM,kB;UAIPZ,MAAM,CAACS,Y;;;AAWhB,OAAO,MAAMI,sBAAsB,GAAGd,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO;;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,yBAAT,CACLT,WADK,EAKL;AAAA;;AACA,QAAMC,OAAO,GAAG,EAAE,GAAGL,cAAL;AAAqB,OAAGI;AAAxB,GAAhB;AACA,SAAOL,MAAM,CAACe,WAAP,CAGLF,sBAHK,EAGmBP,OAHnB,CAAP;AAID;;IAXeQ,yB;UAOPd,MAAM,CAACe,W;;;AAchB,OAAO,MAAMC,gCAAgC,GAAGjB,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkB,uCAAT,CACLZ,WADK,EAKL;AAAA;;AACA,QAAMC,OAAO,GAAG,EAAE,GAAGL,cAAL;AAAqB,OAAGI;AAAxB,GAAhB;AACA,SAAOL,MAAM,CAACkB,eAAP,CAGLF,gCAHK,EAG6BV,OAH7B,CAAP;AAID;;IAXeW,uC;UAOPjB,MAAM,CAACkB,e","sourcesContent":["import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type CreateSuborder = {\n  __typename?: \"CreateSuborder\";\n  createSuborder?: Maybe<OrderType>;\n};\n\nexport type CreateSuborderCreateSuborderArgs = {\n  suborder: SuborderInputType;\n  token: Scalars[\"String\"];\n};\n\nexport type DrinkType = {\n  __typename?: \"DrinkType\";\n  /** Amount of drink measured in stored unit */\n  amount: Scalars[\"Float\"];\n  /** Drink Id */\n  id: Scalars[\"Int\"];\n  /** Drink Name */\n  name: Scalars[\"String\"];\n  /** Drink Price */\n  price: Scalars[\"Float\"];\n  /** Unit in which is Amount stated */\n  unit: Scalars[\"String\"];\n};\n\nexport type MealInputType = {\n  count: Scalars[\"Int\"];\n  id: Scalars[\"Int\"];\n};\n\nexport type MealType = {\n  __typename?: \"MealType\";\n  /** Meal id */\n  id: Scalars[\"Int\"];\n  /** Meal name */\n  name: Scalars[\"String\"];\n  /** Meal price */\n  price: Scalars[\"Float\"];\n};\n\nexport type MealsQuery = {\n  __typename?: \"MealsQuery\";\n  drinks?: Maybe<Array<Maybe<DrinkType>>>;\n  meals?: Maybe<Array<Maybe<MealType>>>;\n  orderById?: Maybe<OrderType>;\n};\n\nexport type MealsQueryOrderByIdArgs = {\n  orderId: Scalars[\"Int\"];\n  token: Scalars[\"String\"];\n};\n\nexport type OrderChangedSubscription = {\n  __typename?: \"OrderChangedSubscription\";\n  orderChanged?: Maybe<OrderType>;\n};\n\nexport type OrderChangedSubscriptionOrderChangedArgs = {\n  orderId: Scalars[\"Int\"];\n  token: Scalars[\"String\"];\n};\n\n/** Describes state of order */\nexport enum OrderStateEnumType {\n  Closed = \"CLOSED\",\n  Open = \"OPEN\",\n  Waiting = \"WAITING\",\n}\n\nexport type OrderType = {\n  __typename?: \"OrderType\";\n  /** Price */\n  finalPrice: Scalars[\"Float\"];\n  /** Order id */\n  id: Scalars[\"Int\"];\n  orderState?: Maybe<OrderStateEnumType>;\n  suborders?: Maybe<Array<Maybe<SuborderType>>>;\n  /** Table id */\n  tableId: Scalars[\"Int\"];\n  /** Token */\n  token: Scalars[\"String\"];\n};\n\nexport type SuborderDrinkType = {\n  __typename?: \"SuborderDrinkType\";\n  /** Amount of drink measured in stored unit */\n  amount: Scalars[\"Float\"];\n  /** Count of drinks in suborder. */\n  count: Scalars[\"Int\"];\n  /** Drink Id */\n  id: Scalars[\"Int\"];\n  /** Drink name. */\n  name: Scalars[\"String\"];\n  /** Drink Price */\n  price: Scalars[\"Float\"];\n  /** Unit in which is Amount stated */\n  unit: Scalars[\"String\"];\n};\n\nexport type SuborderInputType = {\n  drinks?: Maybe<Array<Maybe<MealInputType>>>;\n  meals?: Maybe<Array<Maybe<MealInputType>>>;\n  tableId: Scalars[\"Int\"];\n};\n\nexport type SuborderMealType = {\n  __typename?: \"SuborderMealType\";\n  /** Count of meal in suborder */\n  count: Scalars[\"Int\"];\n  /** Meal id */\n  id: Scalars[\"Int\"];\n  /** Meal name */\n  name: Scalars[\"String\"];\n  /** Meal price */\n  price: Scalars[\"Float\"];\n};\n\nexport type SuborderType = {\n  __typename?: \"SuborderType\";\n  drinks?: Maybe<Array<Maybe<SuborderDrinkType>>>;\n  /** Suborder id */\n  id: Scalars[\"Int\"];\n  meals?: Maybe<Array<Maybe<SuborderMealType>>>;\n  /** Order id */\n  orderId: Scalars[\"Int\"];\n  /** Table id */\n  tableId: Scalars[\"Int\"];\n};\n\nexport type MealsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type DrinksQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type DrinksQuery = {\n  __typename?: \"MealsQuery\";\n  drinks?:\n    | Array<\n        | {\n            __typename?: \"DrinkType\";\n            id: number;\n            name: string;\n            price: number;\n            amount: number;\n          }\n        | null\n        | undefined\n      >\n    | null\n    | undefined;\n};\n\nexport type CreateSuborderMutationVariables = Exact<{\n  tableId: Scalars[\"Int\"];\n  meals?: Maybe<Array<Maybe<MealInputType>> | Maybe<MealInputType>>;\n  drinks?: Maybe<Array<Maybe<MealInputType>> | Maybe<MealInputType>>;\n  token: Scalars[\"String\"];\n}>;\n\nexport type CreateSuborderMutation = {\n  __typename?: \"CreateSuborder\";\n  createSuborder?:\n    | { __typename?: \"OrderType\"; id: number; token: string; tableId: number }\n    | null\n    | undefined;\n};\n\nexport type OrderChangedSubscriptionSubscriptionVariables = Exact<{\n  orderId: Scalars[\"Int\"];\n  token: Scalars[\"String\"];\n}>;\n\nexport type OrderChangedSubscriptionSubscription = {\n  __typename?: \"OrderChangedSubscription\";\n  orderChanged?:\n    | {\n        __typename?: \"OrderType\";\n        id: number;\n        token: string;\n        orderState?: OrderStateEnumType | null | undefined;\n        finalPrice: number;\n        suborders?:\n          | Array<\n              | {\n                  __typename?: \"SuborderType\";\n                  meals?:\n                    | Array<\n                        | {\n                            __typename?: \"SuborderMealType\";\n                            id: number;\n                            name: string;\n                            price: number;\n                          }\n                        | null\n                        | undefined\n                      >\n                    | null\n                    | undefined;\n                  drinks?:\n                    | Array<\n                        | {\n                            __typename?: \"SuborderDrinkType\";\n                            id: number;\n                            name: string;\n                            price: number;\n                          }\n                        | null\n                        | undefined\n                      >\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport const MealsDocument = gql`\n  query Meals {\n    meals {\n      id\n      name\n      price\n    }\n  }\n`;\n\n/**\n * __useMealsQuery__\n *\n * To run a query within a React component, call `useMealsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMealsQuery(\n  baseOptions?: Apollo.QueryHookOptions<MealsQuery, MealsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<MealsQuery, MealsQueryVariables>(\n    MealsDocument,\n    options\n  );\n}\nexport function useMealsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MealsQuery, MealsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<MealsQuery, MealsQueryVariables>(\n    MealsDocument,\n    options\n  );\n}\nexport type MealsQueryHookResult = ReturnType<typeof useMealsQuery>;\nexport type MealsLazyQueryHookResult = ReturnType<typeof useMealsLazyQuery>;\nexport type MealsQueryResult = Apollo.QueryResult<\n  MealsQuery,\n  MealsQueryVariables\n>;\nexport const DrinksDocument = gql`\n  query Drinks {\n    drinks {\n      id\n      name\n      price\n      amount\n    }\n  }\n`;\n\n/**\n * __useDrinksQuery__\n *\n * To run a query within a React component, call `useDrinksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDrinksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDrinksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDrinksQuery(\n  baseOptions?: Apollo.QueryHookOptions<DrinksQuery, DrinksQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<DrinksQuery, DrinksQueryVariables>(\n    DrinksDocument,\n    options\n  );\n}\nexport function useDrinksLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<DrinksQuery, DrinksQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<DrinksQuery, DrinksQueryVariables>(\n    DrinksDocument,\n    options\n  );\n}\nexport type DrinksQueryHookResult = ReturnType<typeof useDrinksQuery>;\nexport type DrinksLazyQueryHookResult = ReturnType<typeof useDrinksLazyQuery>;\nexport type DrinksQueryResult = Apollo.QueryResult<\n  DrinksQuery,\n  DrinksQueryVariables\n>;\nexport const CreateSuborderDocument = gql`\n  mutation CreateSuborder(\n    $tableId: Int!\n    $meals: [MealInputType]\n    $drinks: [MealInputType]\n    $token: String!\n  ) {\n    createSuborder(\n      suborder: { tableId: $tableId, meals: $meals, drinks: $drinks }\n      token: $token\n    ) {\n      id\n      token\n      tableId\n    }\n  }\n`;\nexport type CreateSuborderMutationFn = Apollo.MutationFunction<\n  CreateSuborderMutation,\n  CreateSuborderMutationVariables\n>;\n\n/**\n * __useCreateSuborderMutation__\n *\n * To run a mutation, you first call `useCreateSuborderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSuborderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSuborderMutation, { data, loading, error }] = useCreateSuborderMutation({\n *   variables: {\n *      tableId: // value for 'tableId'\n *      meals: // value for 'meals'\n *      drinks: // value for 'drinks'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useCreateSuborderMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateSuborderMutation,\n    CreateSuborderMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    CreateSuborderMutation,\n    CreateSuborderMutationVariables\n  >(CreateSuborderDocument, options);\n}\nexport type CreateSuborderMutationHookResult = ReturnType<\n  typeof useCreateSuborderMutation\n>;\nexport type CreateSuborderMutationResult =\n  Apollo.MutationResult<CreateSuborderMutation>;\nexport type CreateSuborderMutationOptions = Apollo.BaseMutationOptions<\n  CreateSuborderMutation,\n  CreateSuborderMutationVariables\n>;\nexport const OrderChangedSubscriptionDocument = gql`\n  subscription OrderChangedSubscription($orderId: Int!, $token: String!) {\n    orderChanged(orderId: $orderId, token: $token) {\n      id\n      token\n      orderState\n      suborders {\n        meals {\n          id\n          name\n          price\n        }\n        drinks {\n          id\n          name\n          price\n        }\n      }\n      finalPrice\n    }\n  }\n`;\n\n/**\n * __useOrderChangedSubscriptionSubscription__\n *\n * To run a query within a React component, call `useOrderChangedSubscriptionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useOrderChangedSubscriptionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOrderChangedSubscriptionSubscription({\n *   variables: {\n *      orderId: // value for 'orderId'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useOrderChangedSubscriptionSubscription(\n  baseOptions: Apollo.SubscriptionHookOptions<\n    OrderChangedSubscriptionSubscription,\n    OrderChangedSubscriptionSubscriptionVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useSubscription<\n    OrderChangedSubscriptionSubscription,\n    OrderChangedSubscriptionSubscriptionVariables\n  >(OrderChangedSubscriptionDocument, options);\n}\nexport type OrderChangedSubscriptionSubscriptionHookResult = ReturnType<\n  typeof useOrderChangedSubscriptionSubscription\n>;\nexport type OrderChangedSubscriptionSubscriptionResult =\n  Apollo.SubscriptionResult<OrderChangedSubscriptionSubscription>;\n"]},"metadata":{},"sourceType":"module"}