{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const userSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    id: null,\n    inCart: {\n      meals: [],\n      drinks: []\n    },\n    ordered: {\n      meals: [],\n      drinks: []\n    },\n    confirmedOrdered: {\n      meals: null,\n      drinks: null\n    }\n  },\n  reducers: {\n    addDrinkToCart: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.inCart.drinks = [...state.inCart.drinks, payload]; // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    addMealToCart: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.inCart.meals = [...state.inCart.meals, payload];\n    },\n    incrementCount: (state, _ref3) => {\n      let {\n        payload: {\n          id,\n          isMeal\n        }\n      } = _ref3;\n\n      if (isMeal) {\n        state.inCart.meals[state.inCart.meals.findIndex(meal => meal.id === id)].count += 1;\n      } else {\n        state.inCart.drinks[state.inCart.drinks.findIndex(drink => drink.id === id)].count += 1;\n      }\n    },\n    decrementCount: (state, _ref4) => {\n      let {\n        payload: {\n          id,\n          isMeal\n        }\n      } = _ref4;\n\n      if (isMeal) {\n        state.inCart.meals[state.inCart.meals.findIndex(meal => meal.id === id)].count -= 1;\n      } else {\n        state.inCart.drinks[state.inCart.drinks.findIndex(drink => drink.id === id)].count -= 1;\n      }\n    },\n    emptyCart: state => {\n      //TODO is this good or should I assign it from backend?\n      state.ordered.meals = state.inCart.meals;\n      state.ordered.drinks = state.inCart.drinks;\n      state.inCart.meals = [];\n      state.inCart.drinks = [];\n    },\n    saveOrderId: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.id = payload;\n    },\n    cacheOrderedMealsFromWebSocket: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.confirmedOrdered.meals = payload;\n    },\n    cacheOrderedDrinksFromWebSocket: (state, _ref7) => {\n      let {\n        payload\n      } = _ref7;\n      state.confirmedOrdered.drinks = payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addDrinkToCart,\n  addMealToCart,\n  emptyCart,\n  saveOrderId,\n  incrementCount,\n  decrementCount,\n  cacheOrderedMealsFromWebSocket,\n  cacheOrderedDrinksFromWebSocket\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/pages/orderSlice.js"],"names":["createSlice","userSlice","name","initialState","id","inCart","meals","drinks","ordered","confirmedOrdered","reducers","addDrinkToCart","state","payload","addMealToCart","incrementCount","isMeal","findIndex","meal","count","drink","decrementCount","emptyCart","saveOrderId","cacheOrderedMealsFromWebSocket","cacheOrderedDrinksFromWebSocket","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,EAAE,EAAE,IADQ;AAEZC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFI;AAMZC,IAAAA,OAAO,EAAE;AACPF,MAAAA,KAAK,EAAE,EADA;AAEPC,MAAAA,MAAM,EAAE;AAFD,KANG;AAUZE,IAAAA,gBAAgB,EAAE;AAChBH,MAAAA,KAAK,EAAE,IADS;AAEhBC,MAAAA,MAAM,EAAE;AAFQ;AAVN,GAFqB;AAiBnCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACtCD,MAAAA,KAAK,CAACP,MAAN,CAAaE,MAAb,GAAsB,CAAC,GAAGK,KAAK,CAACP,MAAN,CAAaE,MAAjB,EAAyBM,OAAzB,CAAtB,CADsC,CAEtC;AACA;AACA;AACA;AACD,KAPO;AAQRC,IAAAA,aAAa,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACrCD,MAAAA,KAAK,CAACP,MAAN,CAAaC,KAAb,GAAqB,CAAC,GAAGM,KAAK,CAACP,MAAN,CAAaC,KAAjB,EAAwBO,OAAxB,CAArB;AACD,KAVO;AAWRE,IAAAA,cAAc,EAAE,CAACH,KAAD,YAAwC;AAAA,UAAhC;AAAEC,QAAAA,OAAO,EAAE;AAAET,UAAAA,EAAF;AAAMY,UAAAA;AAAN;AAAX,OAAgC;;AACtD,UAAIA,MAAJ,EAAY;AACVJ,QAAAA,KAAK,CAACP,MAAN,CAAaC,KAAb,CACEM,KAAK,CAACP,MAAN,CAAaC,KAAb,CAAmBW,SAAnB,CAA8BC,IAAD,IAAUA,IAAI,CAACd,EAAL,KAAYA,EAAnD,CADF,EAEEe,KAFF,IAEW,CAFX;AAGD,OAJD,MAIO;AACLP,QAAAA,KAAK,CAACP,MAAN,CAAaE,MAAb,CACEK,KAAK,CAACP,MAAN,CAAaE,MAAb,CAAoBU,SAApB,CAA+BG,KAAD,IAAWA,KAAK,CAAChB,EAAN,KAAaA,EAAtD,CADF,EAEEe,KAFF,IAEW,CAFX;AAGD;AACF,KArBO;AAuBRE,IAAAA,cAAc,EAAE,CAACT,KAAD,YAAwC;AAAA,UAAhC;AAAEC,QAAAA,OAAO,EAAE;AAAET,UAAAA,EAAF;AAAMY,UAAAA;AAAN;AAAX,OAAgC;;AACtD,UAAIA,MAAJ,EAAY;AACVJ,QAAAA,KAAK,CAACP,MAAN,CAAaC,KAAb,CACEM,KAAK,CAACP,MAAN,CAAaC,KAAb,CAAmBW,SAAnB,CAA8BC,IAAD,IAAUA,IAAI,CAACd,EAAL,KAAYA,EAAnD,CADF,EAEEe,KAFF,IAEW,CAFX;AAGD,OAJD,MAIO;AACLP,QAAAA,KAAK,CAACP,MAAN,CAAaE,MAAb,CACEK,KAAK,CAACP,MAAN,CAAaE,MAAb,CAAoBU,SAApB,CAA+BG,KAAD,IAAWA,KAAK,CAAChB,EAAN,KAAaA,EAAtD,CADF,EAEEe,KAFF,IAEW,CAFX;AAGD;AACF,KAjCO;AAkCRG,IAAAA,SAAS,EAAGV,KAAD,IAAW;AACpB;AACAA,MAAAA,KAAK,CAACJ,OAAN,CAAcF,KAAd,GAAsBM,KAAK,CAACP,MAAN,CAAaC,KAAnC;AACAM,MAAAA,KAAK,CAACJ,OAAN,CAAcD,MAAd,GAAuBK,KAAK,CAACP,MAAN,CAAaE,MAApC;AACAK,MAAAA,KAAK,CAACP,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACAM,MAAAA,KAAK,CAACP,MAAN,CAAaE,MAAb,GAAsB,EAAtB;AACD,KAxCO;AAyCRgB,IAAAA,WAAW,EAAE,CAACX,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACnCD,MAAAA,KAAK,CAACR,EAAN,GAAWS,OAAX;AACD,KA3CO;AA4CRW,IAAAA,8BAA8B,EAAE,CAACZ,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACtDD,MAAAA,KAAK,CAACH,gBAAN,CAAuBH,KAAvB,GAA+BO,OAA/B;AACD,KA9CO;AA+CRY,IAAAA,+BAA+B,EAAE,CAACb,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACvDD,MAAAA,KAAK,CAACH,gBAAN,CAAuBF,MAAvB,GAAgCM,OAAhC;AACD;AAjDO;AAjByB,CAAD,CAA7B,C,CAsEP;;AACA,OAAO,MAAM;AACXF,EAAAA,cADW;AAEXG,EAAAA,aAFW;AAGXQ,EAAAA,SAHW;AAIXC,EAAAA,WAJW;AAKXR,EAAAA,cALW;AAMXM,EAAAA,cANW;AAOXG,EAAAA,8BAPW;AAQXC,EAAAA;AARW,IASTxB,SAAS,CAACyB,OATP;AAWP,eAAezB,SAAS,CAAC0B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    id: null,\n    inCart: {\n      meals: [],\n      drinks: [],\n    },\n    ordered: {\n      meals: [],\n      drinks: [],\n    },\n    confirmedOrdered: {\n      meals: null,\n      drinks: null,\n    },\n  },\n  reducers: {\n    addDrinkToCart: (state, { payload }) => {\n      state.inCart.drinks = [...state.inCart.drinks, payload];\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    addMealToCart: (state, { payload }) => {\n      state.inCart.meals = [...state.inCart.meals, payload];\n    },\n    incrementCount: (state, { payload: { id, isMeal } }) => {\n      if (isMeal) {\n        state.inCart.meals[\n          state.inCart.meals.findIndex((meal) => meal.id === id)\n        ].count += 1;\n      } else {\n        state.inCart.drinks[\n          state.inCart.drinks.findIndex((drink) => drink.id === id)\n        ].count += 1;\n      }\n    },\n\n    decrementCount: (state, { payload: { id, isMeal } }) => {\n      if (isMeal) {\n        state.inCart.meals[\n          state.inCart.meals.findIndex((meal) => meal.id === id)\n        ].count -= 1;\n      } else {\n        state.inCart.drinks[\n          state.inCart.drinks.findIndex((drink) => drink.id === id)\n        ].count -= 1;\n      }\n    },\n    emptyCart: (state) => {\n      //TODO is this good or should I assign it from backend?\n      state.ordered.meals = state.inCart.meals;\n      state.ordered.drinks = state.inCart.drinks;\n      state.inCart.meals = [];\n      state.inCart.drinks = [];\n    },\n    saveOrderId: (state, { payload }) => {\n      state.id = payload;\n    },\n    cacheOrderedMealsFromWebSocket: (state, { payload }) => {\n      state.confirmedOrdered.meals = payload;\n    },\n    cacheOrderedDrinksFromWebSocket: (state, { payload }) => {\n      state.confirmedOrdered.drinks = payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  addDrinkToCart,\n  addMealToCart,\n  emptyCart,\n  saveOrderId,\n  incrementCount,\n  decrementCount,\n  cacheOrderedMealsFromWebSocket,\n  cacheOrderedDrinksFromWebSocket,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}