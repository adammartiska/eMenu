{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { propEq } from \"ramda\";\nexport const userSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    meals: [],\n    drinks: []\n  },\n  reducers: {\n    addDrinkToCart: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.drinks = payload; // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    addMealToCart: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.meals = payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addDrinkToCart,\n  addMealToCart\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/pages/orderSlice.js"],"names":["createSlice","propEq","userSlice","name","initialState","meals","drinks","reducers","addDrinkToCart","state","payload","addMealToCart","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFqB;AAMnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACtCD,MAAAA,KAAK,CAACH,MAAN,GAAeI,OAAf,CADsC,CAEtC;AACA;AACA;AACA;AACD,KAPO;AAQRC,IAAAA,aAAa,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACrCD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,OAAd;AACD;AAVO;AANyB,CAAD,CAA7B,C,CAoBP;;AACA,OAAO,MAAM;AAAEF,EAAAA,cAAF;AAAkBG,EAAAA;AAAlB,IAAoCT,SAAS,CAACU,OAApD;AAEP,eAAeV,SAAS,CAACW,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { propEq } from \"ramda\";\n\nexport const userSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    meals: [],\n    drinks: [],\n  },\n  reducers: {\n    addDrinkToCart: (state, { payload }) => {\n      state.drinks = payload;\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    addMealToCart: (state, { payload }) => {\n      state.meals = payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addDrinkToCart, addMealToCart } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}