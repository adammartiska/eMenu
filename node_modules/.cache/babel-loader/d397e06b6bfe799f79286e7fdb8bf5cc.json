{"ast":null,"code":"import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isObjectType, isInterfaceType, isAbstractType } from '../../type/definition.mjs';\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\n\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n\n          context.reportError(new GraphQLError(`Cannot query field \"${fieldName}\" on type \"${type.name}\".` + suggestion, node));\n        }\n      }\n    }\n\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes].sort((typeA, typeB) => {\n    // Suggest both interface and object types based on how common they are.\n    const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n\n    return naturalCompare(typeA.name, typeB.name);\n  }).map(x => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"],"names":["didYouMean","suggestionList","naturalCompare","GraphQLError","isObjectType","isInterfaceType","isAbstractType","FieldsOnCorrectTypeRule","context","Field","node","type","getParentType","fieldDef","getFieldDef","schema","getSchema","fieldName","name","value","suggestion","getSuggestedTypeNames","getSuggestedFieldNames","reportError","suggestedTypes","Set","usageCount","Object","create","possibleType","getPossibleTypes","getFields","add","possibleInterface","getInterfaces","_usageCount$possibleI","sort","typeA","typeB","usageCountDiff","isSubType","map","x","possibleFieldNames","keys"],"mappings":"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","sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isObjectType,\n  isInterfaceType,\n  isAbstractType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              node,\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n"]},"metadata":{},"sourceType":"module"}