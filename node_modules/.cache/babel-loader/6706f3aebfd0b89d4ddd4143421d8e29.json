{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { createFragmentMap, getFragmentFromSelection, getDefaultValues, getFragmentDefinitions, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument } from \"../../utilities/index.js\";\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\n;\n\nvar StoreWriter = function () {\n  function StoreWriter(cache, reader) {\n    this.cache = cache;\n    this.reader = reader;\n  }\n\n  StoreWriter.prototype.writeToStore = function (store, _a) {\n    var _this = this;\n\n    var query = _a.query,\n        result = _a.result,\n        dataId = _a.dataId,\n        variables = _a.variables,\n        overwrite = _a.overwrite;\n    var operationDefinition = getOperationDefinition(query);\n    var merger = makeProcessedFieldsMerger();\n    variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n    var context = {\n      store: store,\n      written: Object.create(null),\n      merge: function (existing, incoming) {\n        return merger.merge(existing, incoming);\n      },\n      variables: variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false\n    };\n    var ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: {\n        map: new Map()\n      },\n      context: context\n    });\n\n    if (!isReference(ref)) {\n      throw __DEV__ ? new InvariantError(\"Could not identify object \" + JSON.stringify(result)) : new InvariantError(8);\n    }\n\n    context.incomingById.forEach(function (_a, dataId) {\n      var fields = _a.fields,\n          mergeTree = _a.mergeTree,\n          selections = _a.selections;\n      var entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        var applied = _this.applyMerges(mergeTree, entityRef, fields, context);\n\n        if (isReference(applied)) {\n          return;\n        }\n\n        fields = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        var hasSelectionSet_1 = function (storeFieldName) {\n          return fieldsWithSelectionSets_1.has(fieldNameFromStoreName(storeFieldName));\n        };\n\n        var fieldsWithSelectionSets_1 = new Set();\n        selections.forEach(function (selection) {\n          if (isField(selection) && selection.selectionSet) {\n            fieldsWithSelectionSets_1.add(selection.name.value);\n          }\n        });\n\n        var hasMergeFunction_1 = function (storeFieldName) {\n          var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(fields).forEach(function (storeFieldName) {\n          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n            warnAboutDataLoss(entityRef, fields, storeFieldName, context.store);\n          }\n        });\n      }\n\n      store.merge(dataId, fields);\n    });\n    store.retain(ref.__ref);\n    return ref;\n  };\n\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n\n    var dataId = _a.dataId,\n        result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context,\n        mergeTree = _a.mergeTree;\n    var policies = this.cache.policies;\n\n    var _b = policies.identify(result, selectionSet, context.fragmentMap),\n        id = _b[0],\n        keyObject = _b[1];\n\n    dataId = dataId || id;\n\n    if (\"string\" === typeof dataId) {\n      var sets = context.written[dataId] || (context.written[dataId] = []);\n      var ref = makeReference(dataId);\n      if (sets.indexOf(selectionSet) >= 0) return ref;\n      sets.push(selectionSet);\n\n      if (this.reader && this.reader.isFresh(result, ref, selectionSet, context)) {\n        return ref;\n      }\n    }\n\n    var incomingFields = Object.create(null);\n\n    if (keyObject) {\n      incomingFields = context.merge(incomingFields, keyObject);\n    }\n\n    var typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n\n    if (\"string\" === typeof typename) {\n      incomingFields.__typename = typename;\n    }\n\n    var selections = new Set(selectionSet.selections);\n    selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, context.variables)) return;\n\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n        var wasClientOnly = context.clientOnly;\n        context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function (d) {\n          return d.name.value === \"client\";\n        }));\n\n        if (value !== void 0) {\n          var storeFieldName = policies.getStoreFieldName({\n            typename: typename,\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables\n          });\n          var childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n          var incomingValue = _this.processFieldValue(value, selection, context, childTree);\n\n          var childTypename = void 0;\n\n          if (selection.selectionSet) {\n            childTypename = context.store.getFieldValue(incomingValue, \"__typename\");\n\n            if (!childTypename && isReference(incomingValue)) {\n              var info = context.incomingById.get(incomingValue.__ref);\n              childTypename = info && info.fields.__typename;\n            }\n          }\n\n          var merge = policies.getMergeFunction(typename, selection.name.value, childTypename);\n\n          if (merge) {\n            childTree.info = {\n              field: selection,\n              typename: typename,\n              merge: merge\n            };\n          } else {\n            maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n          }\n\n          incomingFields = context.merge(incomingFields, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n        } else if (!context.clientOnly && !addTypenameToDocument.added(selection)) {\n          __DEV__ && invariant.error((\"Missing field '\" + resultKeyNameFromField(selection) + \"' while writing result \" + JSON.stringify(result, null, 2)).substring(0, 1000));\n        }\n\n        context.clientOnly = wasClientOnly;\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n          fragment.selectionSet.selections.forEach(selections.add, selections);\n        }\n      }\n    });\n\n    if (\"string\" === typeof dataId) {\n      var previous = context.incomingById.get(dataId);\n\n      if (previous) {\n        previous.fields = context.merge(previous.fields, incomingFields);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        previous.selections.forEach(selections.add, selections);\n        previous.selections = selections;\n      } else {\n        context.incomingById.set(dataId, {\n          fields: incomingFields,\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          selections: selections\n        });\n      }\n\n      return makeReference(dataId);\n    }\n\n    return incomingFields;\n  };\n\n  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n    var _this = this;\n\n    if (!field.selectionSet || value === null) {\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(function (item, i) {\n        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      mergeTree: mergeTree\n    });\n  };\n\n  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n    var _a;\n\n    var _this = this;\n\n    if (mergeTree.map.size && !isReference(incoming)) {\n      var e_1 = !Array.isArray(incoming) && (isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;\n      var i_1 = incoming;\n\n      if (e_1 && !getStorageArgs) {\n        getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n      }\n\n      var changedFields_1;\n\n      var getValue_1 = function (from, name) {\n        return Array.isArray(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n      };\n\n      mergeTree.map.forEach(function (childTree, storeFieldName) {\n        var eVal = getValue_1(e_1, storeFieldName);\n        var iVal = getValue_1(i_1, storeFieldName);\n        if (void 0 === iVal) return;\n\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n\n        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n\n        if (aVal !== iVal) {\n          changedFields_1 = changedFields_1 || new Map();\n          changedFields_1.set(storeFieldName, aVal);\n        }\n\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields_1) {\n        incoming = Array.isArray(i_1) ? i_1.slice(0) : __assign({}, i_1);\n        changedFields_1.forEach(function (value, name) {\n          incoming[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n    }\n\n    return incoming;\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\n\nfunction getChildMergeTree(_a, name) {\n  var map = _a.map;\n\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || {\n      map: new Map()\n    });\n  }\n\n  return map.get(name);\n}\n\nfunction mergeMergeTrees(left, right) {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n  var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n  var needToMergeMaps = left.map.size && right.map.size;\n  var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n  var merged = {\n    info: info,\n    map: map\n  };\n\n  if (needToMergeMaps) {\n    var remainingRightKeys_1 = new Set(right.map.keys());\n    left.map.forEach(function (leftTree, key) {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys_1.delete(key);\n    });\n    remainingRightKeys_1.forEach(function (key) {\n      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree) {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(_a, name) {\n  var map = _a.map;\n  var childTree = map.get(name);\n\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nvar warnings = new Set();\n\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n  var getChild = function (objOrRef) {\n    var child = store.getFieldValue(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  var existing = getChild(existingRef);\n  if (!existing) return;\n  var incoming = getChild(incomingObj);\n  if (!incoming) return;\n  if (isReference(existing)) return;\n  if (equal(existing, incoming)) return;\n\n  if (Object.keys(existing).every(function (key) {\n    return store.getFieldValue(incoming, key) !== void 0;\n  })) {\n    return;\n  }\n\n  var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var typeDotName = parentType + \".\" + fieldName;\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n  var childTypenames = [];\n\n  if (!Array.isArray(existing) && !Array.isArray(incoming)) {\n    [existing, incoming].forEach(function (child) {\n      var typename = store.getFieldValue(child, \"__typename\");\n\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  __DEV__ && invariant.warn(\"Cache data may be lost when replacing the \" + fieldName + \" field of a \" + parentType + \" object.\\n\\nTo address this problem (which is not a bug in Apollo Client), \" + (childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\") + \"define a custom merge function for the \" + typeDotName + \" field, so InMemoryCache can safely merge these objects:\\n\\n  existing: \" + JSON.stringify(existing).slice(0, 1000) + \"\\n  incoming: \" + JSON.stringify(incoming).slice(0, 1000) + \"\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\");\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/writeToStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport { SelectionSetNode, FieldNode, SelectionNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport {\n  createFragmentMap,\n  FragmentMap,\n  getFragmentFromSelection,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  Reference,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n} from '../../utilities';\n\nimport { NormalizedCache, ReadMergeModifyContext, MergeTree } from './types';\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject } from './helpers';\nimport { StoreReader } from './readFromStore';\nimport { InMemoryCache } from './inMemoryCache';\nimport { EntityStore } from './entityStore';\nimport { Cache } from '../../core';\nimport { canonicalStringify } from './object-canon';\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap?: FragmentMap;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<string, {\n    fields: StoreObject;\n    mergeTree?: MergeTree;\n    selections: Set<SelectionNode>;\n  }>;\n  clientOnly: boolean;\n};\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string,\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n  ) {}\n\n  public writeToStore(store: NormalizedCache, {\n    query,\n    result,\n    dataId,\n    variables,\n    overwrite,\n  }: Cache.WriteOptions): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map,\n      clientOnly: false,\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw new InvariantError(`Could not identify object ${JSON.stringify(result)}`);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(({ fields, mergeTree, selections }, dataId) => {\n      const entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        const applied = this.applyMerges(mergeTree, entityRef, fields, context);\n        if (isReference(applied)) {\n          // Assume References returned by applyMerges have already been merged\n          // into the store. See makeMergeObjectsFunction in policies.ts for an\n          // example of how this can happen.\n          return;\n        }\n        // Otherwise, applyMerges returned a StoreObject, whose fields we should\n        // merge into the store (see store.merge statement below).\n        fields = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        const hasSelectionSet = (storeFieldName: string) =>\n          fieldsWithSelectionSets.has(fieldNameFromStoreName(storeFieldName));\n        const fieldsWithSelectionSets = new Set<string>();\n        selections.forEach(selection => {\n          if (isField(selection) && selection.selectionSet) {\n            fieldsWithSelectionSets.add(selection.name.value);\n          }\n        });\n\n        const hasMergeFunction = (storeFieldName: string) => {\n          const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(fields).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(\n              entityRef,\n              fields,\n              storeFieldName,\n              context.store,\n            );\n          }\n        });\n      }\n\n      store.merge(dataId, fields);\n    });\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    const [id, keyObject] = policies.identify(\n      result, selectionSet, context.fragmentMap);\n\n    // If dataId was not provided, fall back to the id just generated by\n    // policies.identify.\n    dataId = dataId || id;\n\n    if (\"string\" === typeof dataId) {\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      const ref = makeReference(dataId);\n      if (sets.indexOf(selectionSet) >= 0) return ref;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(\n        result,\n        ref,\n        selectionSet,\n        context,\n      )) {\n        return ref;\n      }\n    }\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incomingFields: StoreObject = Object.create(null);\n\n    // Write any key fields that were used during identification, even if\n    // they were not mentioned in the original query.\n    if (keyObject) {\n      incomingFields = context.merge(incomingFields, keyObject);\n    }\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && context.store.get(dataId, \"__typename\") as string);\n\n    if (\"string\" === typeof typename) {\n      incomingFields.__typename = typename;\n    }\n\n    const selections = new Set(selectionSet.selections);\n\n    selections.forEach(selection => {\n      if (!shouldInclude(selection, context.variables)) return;\n\n      if (isField(selection)) {\n        const resultFieldKey = resultKeyNameFromField(selection);\n        const value = result[resultFieldKey];\n\n        const wasClientOnly = context.clientOnly;\n        context.clientOnly = wasClientOnly || !!(\n          selection.directives &&\n          selection.directives.some(d => d.name.value === \"client\")\n        );\n\n        if (value !== void 0) {\n          const storeFieldName = policies.getStoreFieldName({\n            typename,\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n          });\n\n          const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n          let incomingValue =\n            this.processFieldValue(value, selection, context, childTree);\n\n          // To determine if this field holds a child object with a merge\n          // function defined in its type policy (see PR #7070), we need to\n          // figure out the child object's __typename.\n          let childTypename: string | undefined;\n\n          // The field's value can be an object that has a __typename only if\n          // the field has a selection set. Otherwise incomingValue is scalar.\n          if (selection.selectionSet) {\n            // We attempt to find the child __typename first in context.store,\n            // but the child object may not exist in the store yet, likely\n            // because it's being written for the first time, during this very\n            // call to writeToStore. Note: if incomingValue is a non-normalized\n            // StoreObject (not a Reference), getFieldValue will read from that\n            // object's properties to find its __typename.\n            childTypename = context.store.getFieldValue<string>(\n              incomingValue as StoreObject | Reference,\n              \"__typename\",\n            );\n\n            // If the child object is being written for the first time, but\n            // incomingValue is a Reference, then the entity that Reference\n            // identifies should have an entry in context.incomingById, which\n            // likely contains a __typename field we can use. After all, how\n            // could we know the object's ID if it had no __typename? If we\n            // wrote data into context.store as each processSelectionSet call\n            // finished processing an entity object, the child object would\n            // already be in context.store, so we wouldn't need this extra\n            // check, but holding all context.store.merge calls until after\n            // we've finished all processSelectionSet work is cleaner and solves\n            // other problems, such as issue #8370.\n            if (!childTypename && isReference(incomingValue)) {\n              const info = context.incomingById.get(incomingValue.__ref);\n              childTypename = info && info.fields.__typename;\n            }\n          }\n\n          const merge = policies.getMergeFunction(\n            typename,\n            selection.name.value,\n            childTypename,\n          );\n\n          if (merge) {\n            childTree.info = {\n              // TODO Check compatibility against any existing\n              // childTree.field?\n              field: selection,\n              typename,\n              merge,\n            };\n          } else {\n            maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n          }\n\n          incomingFields = context.merge(incomingFields, {\n            [storeFieldName]: incomingValue,\n          });\n\n        } else if (\n          !context.clientOnly &&\n          !addTypenameToDocument.added(selection)\n        ) {\n          invariant.error(`Missing field '${\n            resultKeyNameFromField(selection)\n          }' while writing result ${\n            JSON.stringify(result, null, 2)\n          }`.substring(0, 1000));\n        }\n\n        context.clientOnly = wasClientOnly;\n\n      } else {\n        // This is not a field, so it must be a fragment, either inline or named\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment &&\n            // By passing result and context.variables, we enable\n            // policies.fragmentMatches to bend the rules when typename is\n            // not a known subtype of the fragment type condition, but the\n            // result object contains all the keys requested by the\n            // fragment, which strongly suggests the fragment probably\n            // matched. This fuzzy matching behavior must be enabled by\n            // including a regular expression string (such as \".*\" or\n            // \"Prefix.*\" or \".*Suffix\") in the possibleTypes array for\n            // specific supertypes; otherwise, all matching remains exact.\n            // Fuzzy matches are remembered by the Policies object and\n            // later used when reading from the cache. Since there is no\n            // incoming result object to check when reading, reading does\n            // not involve the same fuzzy inference, so the StoreReader\n            // class calls policies.fragmentMatches without passing result\n            // or context.variables. The flexibility of fuzzy matching\n            // allows existing clients to accommodate previously unknown\n            // __typename strings produced by server/schema changes, which\n            // would otherwise be breaking changes.\n            policies.fragmentMatches(fragment, typename, result, context.variables)) {\n          fragment.selectionSet.selections.forEach(selections.add, selections);\n        }\n      }\n    });\n\n    if (\"string\" === typeof dataId) {\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.fields = context.merge(previous.fields, incomingFields);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        // Add all previous SelectionNode objects, rather than creating a new\n        // Set, since the original unmerged selections Set is not going to be\n        // needed again (only the merged Set).\n        previous.selections.forEach(selections.add, selections);\n        previous.selections = selections;\n      } else {\n        context.incomingById.set(dataId, {\n          fields: incomingFields,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          selections,\n        });\n      }\n      return makeReference(dataId);\n    }\n\n    return incomingFields;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree,\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>,\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined = (\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !Array.isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n      ) ? existing : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number,\n      ): StoreValue => {\n        return Array.isArray(from)\n          ? (typeof name === \"number\" ? from[name] : void 0)\n          : context.store.getFieldValue(from, String(name))\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs,\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map;\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (Array.isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs),\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined,\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info = left.info && right.info ? {\n    ...left.info,\n    ...right.info,\n  } : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps ? new Map :\n    left.map.size ? left.map : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(leftTree, right.map.get(key)),\n      );\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach(key => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(\n          right.map.get(key),\n          left.map.get(key),\n        ),\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache,\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(\n    key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!Array.isArray(existing) &&\n      !Array.isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" &&\n          !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n`Cache data may be lost when replacing the ${fieldName} field of a ${parentType} object.\n\nTo address this problem (which is not a bug in Apollo Client), ${\n  childTypenames.length\n    ? \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n    : \"\"\n}define a custom merge function for the ${\n  typeDotName\n} field, so InMemoryCache can safely merge these objects:\n\n  existing: ${JSON.stringify(existing).slice(0, 1000)}\n  incoming: ${JSON.stringify(incoming).slice(0, 1000)}\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}