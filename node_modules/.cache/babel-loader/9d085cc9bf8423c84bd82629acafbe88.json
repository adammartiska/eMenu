{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { propEq } from \"ramda\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    token: null\n  },\n  reducers: {\n    saveToken: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.token = payload;\n    } // addToCart: (state, { payload }) => {\n    //   // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    //   // doesn't actually mutate the state because it uses the Immer library,\n    //   // which detects changes to a \"draft state\" and produces a brand new\n    //   // immutable state based off those changes\n    //   const index = state.mealOrder.findIndex((meal) => meal.id === payload.id);\n    //   if (index !== -1) {\n    //     state.mealOrder[index] = payload;\n    //   } else {\n    //     state.mealOrder = [...state.mealOrder, payload];\n    //   }\n    // },\n    // incrementCount: (state, { payload }) => {\n    //   state.drinks[\n    //     state.drinks.findIndex((drink) => drink.id === payload)\n    //   ].count += 1;\n    // },\n    // decrementCount: (state, { payload }) => {\n    //   state.drinks[\n    //     state.drinks.findIndex((drink) => drink.id === payload)\n    //   ].count -= 1;\n    // },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToCart,\n  decrement,\n  incrementCount,\n  decrementCount,\n  saveToken\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/pages/userSlice.js"],"names":["createSlice","propEq","userSlice","name","initialState","token","reducers","saveToken","state","payload","addToCart","decrement","incrementCount","decrementCount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFqB;AAKnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACjCD,MAAAA,KAAK,CAACH,KAAN,GAAcI,OAAd;AACD,KAHO,CAIR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhCQ;AALyB,CAAD,CAA7B,C,CAyCP;;AACA,OAAO,MAAM;AACXC,EAAAA,SADW;AAEXC,EAAAA,SAFW;AAGXC,EAAAA,cAHW;AAIXC,EAAAA,cAJW;AAKXN,EAAAA;AALW,IAMTL,SAAS,CAACY,OANP;AAQP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { propEq } from \"ramda\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    token: null,\n  },\n  reducers: {\n    saveToken: (state, { payload }) => {\n      state.token = payload;\n    },\n    // addToCart: (state, { payload }) => {\n    //   // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    //   // doesn't actually mutate the state because it uses the Immer library,\n    //   // which detects changes to a \"draft state\" and produces a brand new\n    //   // immutable state based off those changes\n    //   const index = state.mealOrder.findIndex((meal) => meal.id === payload.id);\n    //   if (index !== -1) {\n    //     state.mealOrder[index] = payload;\n    //   } else {\n    //     state.mealOrder = [...state.mealOrder, payload];\n    //   }\n    // },\n    // incrementCount: (state, { payload }) => {\n    //   state.drinks[\n    //     state.drinks.findIndex((drink) => drink.id === payload)\n    //   ].count += 1;\n    // },\n\n    // decrementCount: (state, { payload }) => {\n    //   state.drinks[\n    //     state.drinks.findIndex((drink) => drink.id === payload)\n    //   ].count -= 1;\n    // },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  addToCart,\n  decrement,\n  incrementCount,\n  decrementCount,\n  saveToken,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}