{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport curryN from \"./curryN.js\";\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\n\nvar uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n\n    return value;\n  });\n});\n\nexport default uncurryN;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/ramda/es/uncurryN.js"],"names":["_curry2","curryN","uncurryN","depth","fn","currentDepth","value","idx","endIdx","arguments","length","apply","Array","prototype","slice","call"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAF,OAAO,CAAC,SAASE,QAAT,CAAkBC,KAAlB,EAAyBC,EAAzB,EAA6B;AACnC,SAAOH,MAAM,CAACE,KAAD,EAAQ,YAAY;AAC/B,QAAIE,YAAY,GAAG,CAAnB;AACA,QAAIC,KAAK,GAAGF,EAAZ;AACA,QAAIG,GAAG,GAAG,CAAV;AACA,QAAIC,MAAJ;;AAEA,WAAOH,YAAY,IAAIF,KAAhB,IAAyB,OAAOG,KAAP,KAAiB,UAAjD,EAA6D;AAC3DE,MAAAA,MAAM,GAAGH,YAAY,KAAKF,KAAjB,GAAyBM,SAAS,CAACC,MAAnC,GAA4CH,GAAG,GAAGD,KAAK,CAACI,MAAjE;AACAJ,MAAAA,KAAK,GAAGA,KAAK,CAACK,KAAN,CAAY,IAAZ,EAAkBC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsCF,GAAtC,EAA2CC,MAA3C,CAAlB,CAAR;AACAH,MAAAA,YAAY,IAAI,CAAhB;AACAE,MAAAA,GAAG,GAAGC,MAAN;AACD;;AAED,WAAOF,KAAP;AACD,GAdY,CAAb;AAeD,CAhBM,CAFP;;AAoBA,eAAeJ,QAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\nimport curryN from \"./curryN.js\";\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\n\nvar uncurryN =\n/*#__PURE__*/\n_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n\n    return value;\n  });\n});\n\nexport default uncurryN;"]},"metadata":{},"sourceType":"module"}