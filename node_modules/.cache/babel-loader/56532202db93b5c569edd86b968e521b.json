{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinkOrder: [],\n    drinks: []\n  },\n  reducers: {\n    cacheD: (state, {\n      payload\n    }) => {\n      state.meals = payload;\n    },\n    addToCart: (state, {\n      payload\n    }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = [...state.drinks, payload];\n    },\n    incrementCount: (state, {\n      payload\n    }) => {\n      state.drinks[state.drinks.findIndex(drink => drink.id === payload)].count += 1;\n    },\n    decrementCount: (state, {\n      payload\n    }) => {\n      state.drinks[state.drinks.findIndex(drink => drink.id === payload)].count -= 1;\n    } // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToCart,\n  decrement,\n  incrementCount,\n  decrementCount\n} = drinksSlice.actions;\nexport default drinksSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/src/pages/drinksSlice.js"],"names":["createSlice","drinksSlice","name","initialState","drinkOrder","drinks","reducers","cacheD","state","payload","meals","addToCart","incrementCount","findIndex","drink","id","count","decrementCount","decrement","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGD,WAAW,CAAC;AACrCE,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFuB;AAMrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC9BD,MAAAA,KAAK,CAACE,KAAN,GAAcD,OAAd;AACD,KAHO;AAIRE,IAAAA,SAAS,EAAE,CAACH,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACjC;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,MAAN,GAAe,CAAC,GAAGG,KAAK,CAACH,MAAV,EAAkBI,OAAlB,CAAf;AACD,KAVO;AAWRG,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtCD,MAAAA,KAAK,CAACH,MAAN,CACEG,KAAK,CAACH,MAAN,CAAaQ,SAAb,CAAwBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaN,OAA/C,CADF,EAEEO,KAFF,IAEW,CAFX;AAGD,KAfO;AAiBRC,IAAAA,cAAc,EAAE,CAACT,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtCD,MAAAA,KAAK,CAACH,MAAN,CACEG,KAAK,CAACH,MAAN,CAAaQ,SAAb,CAAwBC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaN,OAA/C,CADF,EAEEO,KAFF,IAEW,CAFX;AAGD,KArBO,CAsBR;AACA;AACA;AACA;AACA;AACA;;AA3BQ;AAN2B,CAAD,CAA/B,C,CAqCP;;AACA,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaO,EAAAA,SAAb;AAAwBN,EAAAA,cAAxB;AAAwCK,EAAAA;AAAxC,IACXhB,WAAW,CAACkB,OADP;AAGP,eAAelB,WAAW,CAACmB,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinkOrder: [],\n    drinks: [],\n  },\n  reducers: {\n    cacheD: (state, { payload }) => {\n      state.meals = payload;\n    },\n    addToCart: (state, { payload }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = [...state.drinks, payload];\n    },\n    incrementCount: (state, { payload }) => {\n      state.drinks[\n        state.drinks.findIndex((drink) => drink.id === payload)\n      ].count += 1;\n    },\n\n    decrementCount: (state, { payload }) => {\n      state.drinks[\n        state.drinks.findIndex((drink) => drink.id === payload)\n      ].count -= 1;\n    },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addToCart, decrement, incrementCount, decrementCount } =\n  drinksSlice.actions;\n\nexport default drinksSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}