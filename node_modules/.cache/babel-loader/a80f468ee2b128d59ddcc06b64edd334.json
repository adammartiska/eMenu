{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\n\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while (set = setsToVisit.pop()) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while (node = nodesToVisit.pop()) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: () => false,\n\n        Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/ValidationContext.mjs"],"names":["Kind","visit","TypeInfo","visitWithTypeInfo","ASTValidationContext","constructor","ast","onError","_ast","_fragments","undefined","_fragmentSpreads","Map","_recursivelyReferencedFragments","_onError","Symbol","toStringTag","reportError","error","getDocument","getFragment","name","fragments","Object","create","defNode","definitions","kind","FRAGMENT_DEFINITION","value","getFragmentSpreads","node","spreads","get","setsToVisit","set","pop","selection","selections","FRAGMENT_SPREAD","push","selectionSet","getRecursivelyReferencedFragments","operation","collectedNames","nodesToVisit","spread","fragName","fragment","SDLValidationContext","schema","_schema","getSchema","ValidationContext","typeInfo","_typeInfo","_variableUsages","_recursiveVariableUsages","getVariableUsages","usages","newUsages","VariableDefinition","Variable","variable","type","getInputType","defaultValue","getDefaultValue","getRecursiveVariableUsages","frag","concat","getType","getParentType","getParentInputType","getFieldDef","getDirective","getArgument","getEnumValue"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,2BAA5C;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAN,CAA2B;AAChCC,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAN,EAAe;AACxB,SAAKC,IAAL,GAAYF,GAAZ;AACA,SAAKG,UAAL,GAAkBC,SAAlB;AACA,SAAKC,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;AACA,SAAKC,+BAAL,GAAuC,IAAID,GAAJ,EAAvC;AACA,SAAKE,QAAL,GAAgBP,OAAhB;AACD;;AAEsB,OAAlBQ,MAAM,CAACC,WAAW,IAAI;AACzB,WAAO,sBAAP;AACD;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKJ,QAAL,CAAcI,KAAd;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKX,IAAZ;AACD;;AAEDY,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,QAAIC,SAAJ;;AAEA,QAAI,KAAKb,UAAT,EAAqB;AACnBa,MAAAA,SAAS,GAAG,KAAKb,UAAjB;AACD,KAFD,MAEO;AACLa,MAAAA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;;AAEA,WAAK,MAAMC,OAAX,IAAsB,KAAKN,WAAL,GAAmBO,WAAzC,EAAsD;AACpD,YAAID,OAAO,CAACE,IAAR,KAAiB3B,IAAI,CAAC4B,mBAA1B,EAA+C;AAC7CN,UAAAA,SAAS,CAACG,OAAO,CAACJ,IAAR,CAAaQ,KAAd,CAAT,GAAgCJ,OAAhC;AACD;AACF;;AAED,WAAKhB,UAAL,GAAkBa,SAAlB;AACD;;AAED,WAAOA,SAAS,CAACD,IAAD,CAAhB;AACD;;AAEDS,EAAAA,kBAAkB,CAACC,IAAD,EAAO;AACvB,QAAIC,OAAO,GAAG,KAAKrB,gBAAL,CAAsBsB,GAAtB,CAA0BF,IAA1B,CAAd;;AAEA,QAAI,CAACC,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,EAAV;AACA,YAAME,WAAW,GAAG,CAACH,IAAD,CAApB;AACA,UAAII,GAAJ;;AAEA,aAAQA,GAAG,GAAGD,WAAW,CAACE,GAAZ,EAAd,EAAkC;AAChC,aAAK,MAAMC,SAAX,IAAwBF,GAAG,CAACG,UAA5B,EAAwC;AACtC,cAAID,SAAS,CAACV,IAAV,KAAmB3B,IAAI,CAACuC,eAA5B,EAA6C;AAC3CP,YAAAA,OAAO,CAACQ,IAAR,CAAaH,SAAb;AACD,WAFD,MAEO,IAAIA,SAAS,CAACI,YAAd,EAA4B;AACjCP,YAAAA,WAAW,CAACM,IAAZ,CAAiBH,SAAS,CAACI,YAA3B;AACD;AACF;AACF;;AAED,WAAK9B,gBAAL,CAAsBwB,GAAtB,CAA0BJ,IAA1B,EAAgCC,OAAhC;AACD;;AAED,WAAOA,OAAP;AACD;;AAEDU,EAAAA,iCAAiC,CAACC,SAAD,EAAY;AAC3C,QAAIrB,SAAS,GAAG,KAAKT,+BAAL,CAAqCoB,GAArC,CAAyCU,SAAzC,CAAhB;;AAEA,QAAI,CAACrB,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAG,EAAZ;AACA,YAAMsB,cAAc,GAAGrB,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;AACA,YAAMqB,YAAY,GAAG,CAACF,SAAS,CAACF,YAAX,CAArB;AACA,UAAIV,IAAJ;;AAEA,aAAQA,IAAI,GAAGc,YAAY,CAACT,GAAb,EAAf,EAAoC;AAClC,aAAK,MAAMU,MAAX,IAAqB,KAAKhB,kBAAL,CAAwBC,IAAxB,CAArB,EAAoD;AAClD,gBAAMgB,QAAQ,GAAGD,MAAM,CAACzB,IAAP,CAAYQ,KAA7B;;AAEA,cAAIe,cAAc,CAACG,QAAD,CAAd,KAA6B,IAAjC,EAAuC;AACrCH,YAAAA,cAAc,CAACG,QAAD,CAAd,GAA2B,IAA3B;AACA,kBAAMC,QAAQ,GAAG,KAAK5B,WAAL,CAAiB2B,QAAjB,CAAjB;;AAEA,gBAAIC,QAAJ,EAAc;AACZ1B,cAAAA,SAAS,CAACkB,IAAV,CAAeQ,QAAf;AACAH,cAAAA,YAAY,CAACL,IAAb,CAAkBQ,QAAQ,CAACP,YAA3B;AACD;AACF;AACF;AACF;;AAED,WAAK5B,+BAAL,CAAqCsB,GAArC,CAAyCQ,SAAzC,EAAoDrB,SAApD;AACD;;AAED,WAAOA,SAAP;AACD;;AA9F+B;AAgGlC,OAAO,MAAM2B,oBAAN,SAAmC7C,oBAAnC,CAAwD;AAC7DC,EAAAA,WAAW,CAACC,GAAD,EAAM4C,MAAN,EAAc3C,OAAd,EAAuB;AAChC,UAAMD,GAAN,EAAWC,OAAX;AACA,SAAK4C,OAAL,GAAeD,MAAf;AACD;;AAEsB,OAAlBnC,MAAM,CAACC,WAAW,IAAI;AACzB,WAAO,sBAAP;AACD;;AAEDoC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKD,OAAZ;AACD;;AAZ4D;AAc/D,OAAO,MAAME,iBAAN,SAAgCjD,oBAAhC,CAAqD;AAC1DC,EAAAA,WAAW,CAAC6C,MAAD,EAAS5C,GAAT,EAAcgD,QAAd,EAAwB/C,OAAxB,EAAiC;AAC1C,UAAMD,GAAN,EAAWC,OAAX;AACA,SAAK4C,OAAL,GAAeD,MAAf;AACA,SAAKK,SAAL,GAAiBD,QAAjB;AACA,SAAKE,eAAL,GAAuB,IAAI5C,GAAJ,EAAvB;AACA,SAAK6C,wBAAL,GAAgC,IAAI7C,GAAJ,EAAhC;AACD;;AAEsB,OAAlBG,MAAM,CAACC,WAAW,IAAI;AACzB,WAAO,mBAAP;AACD;;AAEDoC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKD,OAAZ;AACD;;AAEDO,EAAAA,iBAAiB,CAAC3B,IAAD,EAAO;AACtB,QAAI4B,MAAM,GAAG,KAAKH,eAAL,CAAqBvB,GAArB,CAAyBF,IAAzB,CAAb;;AAEA,QAAI,CAAC4B,MAAL,EAAa;AACX,YAAMC,SAAS,GAAG,EAAlB;AACA,YAAMN,QAAQ,GAAG,IAAIpD,QAAJ,CAAa,KAAKiD,OAAlB,CAAjB;AACAlD,MAAAA,KAAK,CACH8B,IADG,EAEH5B,iBAAiB,CAACmD,QAAD,EAAW;AAC1BO,QAAAA,kBAAkB,EAAE,MAAM,KADA;;AAG1BC,QAAAA,QAAQ,CAACC,QAAD,EAAW;AACjBH,UAAAA,SAAS,CAACpB,IAAV,CAAe;AACbT,YAAAA,IAAI,EAAEgC,QADO;AAEbC,YAAAA,IAAI,EAAEV,QAAQ,CAACW,YAAT,EAFO;AAGbC,YAAAA,YAAY,EAAEZ,QAAQ,CAACa,eAAT;AAHD,WAAf;AAKD;;AATyB,OAAX,CAFd,CAAL;AAcAR,MAAAA,MAAM,GAAGC,SAAT;;AAEA,WAAKJ,eAAL,CAAqBrB,GAArB,CAAyBJ,IAAzB,EAA+B4B,MAA/B;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDS,EAAAA,0BAA0B,CAACzB,SAAD,EAAY;AACpC,QAAIgB,MAAM,GAAG,KAAKF,wBAAL,CAA8BxB,GAA9B,CAAkCU,SAAlC,CAAb;;AAEA,QAAI,CAACgB,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,KAAKD,iBAAL,CAAuBf,SAAvB,CAAT;;AAEA,WAAK,MAAM0B,IAAX,IAAmB,KAAK3B,iCAAL,CAAuCC,SAAvC,CAAnB,EAAsE;AACpEgB,QAAAA,MAAM,GAAGA,MAAM,CAACW,MAAP,CAAc,KAAKZ,iBAAL,CAAuBW,IAAvB,CAAd,CAAT;AACD;;AAED,WAAKZ,wBAAL,CAA8BtB,GAA9B,CAAkCQ,SAAlC,EAA6CgB,MAA7C;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDY,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKhB,SAAL,CAAegB,OAAf,EAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKjB,SAAL,CAAeiB,aAAf,EAAP;AACD;;AAEDP,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKV,SAAL,CAAeU,YAAf,EAAP;AACD;;AAEDQ,EAAAA,kBAAkB,GAAG;AACnB,WAAO,KAAKlB,SAAL,CAAekB,kBAAf,EAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKnB,SAAL,CAAemB,WAAf,EAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKpB,SAAL,CAAeoB,YAAf,EAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKrB,SAAL,CAAeqB,WAAf,EAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKtB,SAAL,CAAesB,YAAf,EAAP;AACD;;AA3FyD","sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}