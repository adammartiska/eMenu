{"ast":null,"code":"import _includes from \"./_includes.js\";\n\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  } // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n\n\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  }; //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n\n\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  }; //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n\n\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n\n          return false;\n        }\n      } // these types can all utilise the native Set\n\n\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n\n          return false;\n        }\n\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    /* falls through */\n\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n\n        return false;\n      } // scan through all previously applied items\n\n\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n\n        return false;\n      }\n\n      return true;\n  }\n} // A simple Set type that honours R.equals semantics\n\n\nexport default _Set;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/ramda/es/internal/_Set.js"],"names":["_includes","_Set","_nativeSet","Set","_items","prototype","add","item","hasOrAdd","has","shouldAdd","set","type","prevSize","newSize","Infinity","size","bIdx","push","Object","toString","call"],"mappings":"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","sourcesContent":["import _includes from \"./_includes.js\";\n\nvar _Set =\n/*#__PURE__*/\nfunction () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  }; //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n\n\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  }; //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n\n\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n\n          return false;\n        }\n      } // these types can all utilise the native Set\n\n\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n\n          return false;\n        }\n\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    /* falls through */\n\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n\n        return false;\n      } // scan through all previously applied items\n\n\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n\n        return false;\n      }\n\n      return true;\n  }\n} // A simple Set type that honours R.equals semantics\n\n\nexport default _Set;"]},"metadata":{},"sourceType":"module"}