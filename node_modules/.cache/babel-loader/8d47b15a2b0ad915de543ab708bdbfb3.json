{"ast":null,"code":"var prefixCounts = new Map();\nexport function makeUniqueId(prefix) {\n  var count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return prefix + \":\" + count + \":\" + Math.random().toString(36).slice(2);\n}","map":{"version":3,"sources":["../../../src/utilities/common/makeUniqueId.ts"],"names":[],"mappings":"AAAA,IAAM,YAAY,GAAG,IAAI,GAAJ,EAArB;AAIA,OAAM,SAAU,YAAV,CAAuB,MAAvB,EAAqC;AACzC,MAAM,KAAK,GAAG,YAAY,CAAC,GAAb,CAAiB,MAAjB,KAA4B,CAA1C;AACA,EAAA,YAAY,CAAC,GAAb,CAAiB,MAAjB,EAAyB,KAAK,GAAG,CAAjC;AACA,SAAU,MAAM,GAAA,GAAN,GAAU,KAAV,GAAe,GAAf,GAAmB,IAAI,CAAC,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,KAA3B,CAAiC,CAAjC,CAA7B;AACD","sourcesContent":["const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}