{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\n\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(new GraphQLError(`The directive \"@${directiveName}\" can only be used once at this location.`, [seenDirectives[directiveName], directive]));\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"],"names":["GraphQLError","Kind","isTypeDefinitionNode","isTypeExtensionNode","specifiedDirectives","UniqueDirectivesPerLocationRule","context","uniqueDirectiveMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","name","isRepeatable","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","value","repeatable","schemaDirectives","typeDirectivesMap","enter","node","directives","seenDirectives","SCHEMA_DEFINITION","SCHEMA_EXTENSION","typeName","undefined","directiveName","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SACEC,oBADF,EAEEC,mBAFF,QAGO,+BAHP;AAIA,SAASC,mBAAT,QAAoC,2BAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,CAAyCC,OAAzC,EAAkD;AACvD,QAAMC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA3B;AACA,QAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAf;AACA,QAAMC,iBAAiB,GAAGF,MAAM,GAC5BA,MAAM,CAACG,aAAP,EAD4B,GAE5BT,mBAFJ;;AAIA,OAAK,MAAMU,SAAX,IAAwBF,iBAAxB,EAA2C;AACzCL,IAAAA,kBAAkB,CAACO,SAAS,CAACC,IAAX,CAAlB,GAAqC,CAACD,SAAS,CAACE,YAAhD;AACD;;AAED,QAAMC,cAAc,GAAGX,OAAO,CAACY,WAAR,GAAsBC,WAA7C;;AAEA,OAAK,MAAMC,GAAX,IAAkBH,cAAlB,EAAkC;AAChC,QAAIG,GAAG,CAACC,IAAJ,KAAapB,IAAI,CAACqB,oBAAtB,EAA4C;AAC1Cf,MAAAA,kBAAkB,CAACa,GAAG,CAACL,IAAJ,CAASQ,KAAV,CAAlB,GAAqC,CAACH,GAAG,CAACI,UAA1C;AACD;AACF;;AAED,QAAMC,gBAAgB,GAAGjB,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;AACA,QAAMiB,iBAAiB,GAAGlB,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;AACA,SAAO;AACL;AACA;AACA;AACAkB,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,UAAI,EAAE,gBAAgBA,IAAlB,KAA2B,CAACA,IAAI,CAACC,UAArC,EAAiD;AAC/C;AACD;;AAED,UAAIC,cAAJ;;AAEA,UACEF,IAAI,CAACP,IAAL,KAAcpB,IAAI,CAAC8B,iBAAnB,IACAH,IAAI,CAACP,IAAL,KAAcpB,IAAI,CAAC+B,gBAFrB,EAGE;AACAF,QAAAA,cAAc,GAAGL,gBAAjB;AACD,OALD,MAKO,IAAIvB,oBAAoB,CAAC0B,IAAD,CAApB,IAA8BzB,mBAAmB,CAACyB,IAAD,CAArD,EAA6D;AAClE,cAAMK,QAAQ,GAAGL,IAAI,CAACb,IAAL,CAAUQ,KAA3B;AACAO,QAAAA,cAAc,GAAGJ,iBAAiB,CAACO,QAAD,CAAlC;;AAEA,YAAIH,cAAc,KAAKI,SAAvB,EAAkC;AAChCR,UAAAA,iBAAiB,CAACO,QAAD,CAAjB,GAA8BH,cAAc,GAAGtB,MAAM,CAACC,MAAP,CAAc,IAAd,CAA/C;AACD;AACF,OAPM,MAOA;AACLqB,QAAAA,cAAc,GAAGtB,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;AACD;;AAED,WAAK,MAAMK,SAAX,IAAwBc,IAAI,CAACC,UAA7B,EAAyC;AACvC,cAAMM,aAAa,GAAGrB,SAAS,CAACC,IAAV,CAAeQ,KAArC;;AAEA,YAAIhB,kBAAkB,CAAC4B,aAAD,CAAtB,EAAuC;AACrC,cAAIL,cAAc,CAACK,aAAD,CAAlB,EAAmC;AACjC7B,YAAAA,OAAO,CAAC8B,WAAR,CACE,IAAIpC,YAAJ,CACG,mBAAkBmC,aAAc,2CADnC,EAEE,CAACL,cAAc,CAACK,aAAD,CAAf,EAAgCrB,SAAhC,CAFF,CADF;AAMD,WAPD,MAOO;AACLgB,YAAAA,cAAc,CAACK,aAAD,CAAd,GAAgCrB,SAAhC;AACD;AACF;AACF;AACF;;AA3CI,GAAP;AA6CD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                [seenDirectives[directiveName], directive],\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}