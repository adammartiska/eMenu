{"ast":null,"code":"import { __assign } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray } from \"../../utilities/index.js\";\n\nfunction shallowCopy(value) {\n  if (isObjectOrArray(value)) {\n    return Array.isArray(value) ? value.slice(0) : __assign({\n      __proto__: Object.getPrototypeOf(value)\n    }, value);\n  }\n\n  return value;\n}\n\nvar ObjectCanon = function () {\n  function ObjectCanon() {\n    this.known = new (canUseWeakSet ? WeakSet : Set)();\n    this.pool = new Trie(canUseWeakMap);\n    this.passes = new WeakMap();\n    this.keysByJSON = new Map();\n    this.empty = this.admit({});\n  }\n\n  ObjectCanon.prototype.isKnown = function (value) {\n    return isObjectOrArray(value) && this.known.has(value);\n  };\n\n  ObjectCanon.prototype.pass = function (value) {\n    if (isObjectOrArray(value)) {\n      var copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n\n    return value;\n  };\n\n  ObjectCanon.prototype.admit = function (value) {\n    var _this = this;\n\n    if (isObjectOrArray(value)) {\n      var original = this.passes.get(value);\n      if (original) return original;\n      var proto = Object.getPrototypeOf(value);\n\n      switch (proto) {\n        case Array.prototype:\n          {\n            if (this.known.has(value)) return value;\n            var array = value.map(this.admit, this);\n            var node = this.pool.lookupArray(array);\n\n            if (!node.array) {\n              this.known.add(node.array = array);\n\n              if (__DEV__) {\n                Object.freeze(array);\n              }\n            }\n\n            return node.array;\n          }\n\n        case null:\n        case Object.prototype:\n          {\n            if (this.known.has(value)) return value;\n            var proto_1 = Object.getPrototypeOf(value);\n            var array_1 = [proto_1];\n            var keys = this.sortedKeys(value);\n            array_1.push(keys.json);\n            var firstValueIndex_1 = array_1.length;\n            keys.sorted.forEach(function (key) {\n              array_1.push(_this.admit(value[key]));\n            });\n            var node = this.pool.lookupArray(array_1);\n\n            if (!node.object) {\n              var obj_1 = node.object = Object.create(proto_1);\n              this.known.add(obj_1);\n              keys.sorted.forEach(function (key, i) {\n                obj_1[key] = array_1[firstValueIndex_1 + i];\n              });\n\n              if (__DEV__) {\n                Object.freeze(obj_1);\n              }\n            }\n\n            return node.object;\n          }\n      }\n    }\n\n    return value;\n  };\n\n  ObjectCanon.prototype.sortedKeys = function (obj) {\n    var keys = Object.keys(obj);\n    var node = this.pool.lookupArray(keys);\n\n    if (!node.keys) {\n      keys.sort();\n      var json = JSON.stringify(keys);\n\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = {\n          sorted: keys,\n          json: json\n        });\n      }\n    }\n\n    return node.keys;\n  };\n\n  return ObjectCanon;\n}();\n\nexport { ObjectCanon };\nexport var canonicalStringify = Object.assign(function (value) {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n\n    var canonical = stringifyCanon.admit(value);\n    var json = stringifyCache.get(canonical);\n\n    if (json === void 0) {\n      stringifyCache.set(canonical, json = JSON.stringify(canonical));\n    }\n\n    return json;\n  }\n\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify\n});\nvar stringifyCanon;\nvar stringifyCache;\n\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon();\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/object-canon.ts"],"names":[],"mappings":"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","sourcesContent":["import \"../../utilities/globals\";\n\nimport { Trie } from \"@wry/trie\";\nimport {\n  canUseWeakMap,\n  canUseWeakSet,\n  isNonNullObject as isObjectOrArray,\n} from \"../../utilities\";\n\nfunction shallowCopy<T>(value: T): T {\n  if (isObjectOrArray(value)) {\n    return Array.isArray(value)\n      ? value.slice(0) as any as T\n      : { __proto__: Object.getPrototypeOf(value), ...value };\n  }\n  return value;\n}\n\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nexport class ObjectCanon {\n  // Set of all canonical objects this ObjectCanon has admitted, allowing\n  // canon.admit to return previously-canonicalized objects immediately.\n  private known = new (canUseWeakSet ? WeakSet : Set)<object>();\n\n  // Efficient storage/lookup structure for canonical objects.\n  private pool = new Trie<{\n    array?: any[];\n    object?: Record<string, any>;\n    keys?: SortedKeysInfo;\n  }>(canUseWeakMap);\n\n  public isKnown(value: any): boolean {\n    return isObjectOrArray(value) && this.known.has(value);\n  }\n\n  // Make the ObjectCanon assume this value has already been\n  // canonicalized.\n  private passes = new WeakMap<object, object>();\n  public pass<T>(value: T): T;\n  public pass(value: any) {\n    if (isObjectOrArray(value)) {\n      const copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  }\n\n  // Returns the canonical version of value.\n  public admit<T>(value: T): T;\n  public admit(value: any) {\n    if (isObjectOrArray(value)) {\n      const original = this.passes.get(value);\n      if (original) return original;\n\n      const proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype: {\n          if (this.known.has(value)) return value;\n          const array: any[] = (value as any[]).map(this.admit, this);\n          // Arrays are looked up in the Trie using their recursively\n          // canonicalized elements, and the known version of the array is\n          // preserved as node.array.\n          const node = this.pool.lookupArray(array);\n          if (!node.array) {\n            this.known.add(node.array = array);\n            // Since canonical arrays may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(array);\n            }\n          }\n          return node.array;\n        }\n\n        case null:\n        case Object.prototype: {\n          if (this.known.has(value)) return value;\n          const proto = Object.getPrototypeOf(value);\n          const array = [proto];\n          const keys = this.sortedKeys(value);\n          array.push(keys.json);\n          const firstValueIndex = array.length;\n          keys.sorted.forEach(key => {\n            array.push(this.admit((value as any)[key]));\n          });\n          // Objects are looked up in the Trie by their prototype (which\n          // is *not* recursively canonicalized), followed by a JSON\n          // representation of their (sorted) keys, followed by the\n          // sequence of recursively canonicalized values corresponding to\n          // those keys. To keep the final results unambiguous with other\n          // sequences (such as arrays that just happen to contain [proto,\n          // keys.json, value1, value2, ...]), the known version of the\n          // object is stored as node.object.\n          const node = this.pool.lookupArray(array);\n          if (!node.object) {\n            const obj = node.object = Object.create(proto);\n            this.known.add(obj);\n            keys.sorted.forEach((key, i) => {\n              obj[key] = array[firstValueIndex + i];\n            });\n            // Since canonical objects may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(obj);\n            }\n          }\n          return node.object;\n        }\n      }\n    }\n    return value;\n  }\n\n  // It's worthwhile to cache the sorting of arrays of strings, since the\n  // same initial unsorted arrays tend to be encountered many times.\n  // Fortunately, we can reuse the Trie machinery to look up the sorted\n  // arrays in linear time (which is faster than sorting large arrays).\n  private sortedKeys(obj: object) {\n    const keys = Object.keys(obj);\n    const node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      const json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = { sorted: keys, json });\n      }\n    }\n    return node.keys;\n  }\n  // Arrays that contain the same elements in a different order can share\n  // the same SortedKeysInfo object, to save memory.\n  private keysByJSON = new Map<string, SortedKeysInfo>();\n\n  // This has to come last because it depends on keysByJSON.\n  public readonly empty = this.admit({});\n}\n\ntype SortedKeysInfo = {\n  sorted: string[];\n  json: string;\n};\n\n// Since the keys of canonical objects are always created in lexicographically\n// sorted order, we can use the ObjectCanon to implement a fast and stable\n// version of JSON.stringify, which automatically sorts object keys.\nexport const canonicalStringify = Object.assign(function (value: any): string {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n    const canonical = stringifyCanon.admit(value);\n    let json = stringifyCache.get(canonical);\n    if (json === void 0) {\n      stringifyCache.set(\n        canonical,\n        json = JSON.stringify(canonical),\n      );\n    }\n    return json;\n  }\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify,\n});\n\n// Can be reset by calling canonicalStringify.reset().\nlet stringifyCanon: ObjectCanon;\nlet stringifyCache: WeakMap<object, string>;\n\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon;\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}