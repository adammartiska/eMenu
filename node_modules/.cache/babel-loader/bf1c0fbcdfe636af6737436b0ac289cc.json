{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\nimport { isNode } from '../language/ast.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from '../type/definition.mjs';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(schema,\n  /**\n   * Initial type may be provided in rare cases to facilitate traversals\n   *  beginning somewhere other than documents.\n   */\n  initialType,\n  /** @deprecated will be removed in 17.0.0 */\n  getFieldDefFn) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        {\n          const namedType = getNamedType(this.getType());\n\n          this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n\n          break;\n        }\n\n      case Kind.FIELD:\n        {\n          const parentType = this.getParentType();\n          let fieldDef;\n          let fieldType;\n\n          if (parentType) {\n            fieldDef = this._getFieldDef(schema, parentType, node);\n\n            if (fieldDef) {\n              fieldType = fieldDef.type;\n            }\n          }\n\n          this._fieldDefStack.push(fieldDef);\n\n          this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n          break;\n        }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        {\n          const rootType = schema.getRootType(node.operation);\n\n          this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        {\n          const typeConditionAST = node.typeCondition;\n          const outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n\n          this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n          break;\n        }\n\n      case Kind.VARIABLE_DEFINITION:\n        {\n          const inputType = typeFromAST(schema, node.type);\n\n          this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n\n          break;\n        }\n\n      case Kind.ARGUMENT:\n        {\n          var _this$getDirective;\n\n          let argDef;\n          let argType;\n          const fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();\n\n          if (fieldOrDirective) {\n            argDef = fieldOrDirective.args.find(arg => arg.name === node.name.value);\n\n            if (argDef) {\n              argType = argDef.type;\n            }\n          }\n\n          this._argument = argDef;\n\n          this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n          break;\n        }\n\n      case Kind.LIST:\n        {\n          const listType = getNullableType(this.getInputType());\n          const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n          this._defaultValueStack.push(undefined);\n\n          this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n          break;\n        }\n\n      case Kind.OBJECT_FIELD:\n        {\n          const objectType = getNamedType(this.getInputType());\n          let inputFieldType;\n          let inputField;\n\n          if (isInputObjectType(objectType)) {\n            inputField = objectType.getFields()[node.name.value];\n\n            if (inputField) {\n              inputFieldType = inputField.type;\n            }\n          }\n\n          this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n\n          break;\n        }\n\n      case Kind.ENUM:\n        {\n          const enumType = getNamedType(this.getInputType());\n          let enumValue;\n\n          if (isEnumType(enumType)) {\n            enumValue = enumType.getValue(node.value);\n          }\n\n          this._enumValue = enumValue;\n          break;\n        }\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  }\n\n}\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/utilities/TypeInfo.mjs"],"names":["Kind","isNode","getEnterLeaveForKind","isObjectType","isInterfaceType","isEnumType","isInputObjectType","isListType","isCompositeType","isInputType","isOutputType","getNullableType","getNamedType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","typeFromAST","TypeInfo","constructor","schema","initialType","getFieldDefFn","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_defaultValueStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","push","Symbol","toStringTag","getType","length","getParentType","getInputType","getParentInputType","getDefaultValue","getDirective","getArgument","getEnumValue","enter","node","kind","SELECTION_SET","namedType","undefined","FIELD","parentType","fieldDef","fieldType","type","DIRECTIVE","name","value","OPERATION_DEFINITION","rootType","getRootType","operation","INLINE_FRAGMENT","FRAGMENT_DEFINITION","typeConditionAST","typeCondition","outputType","VARIABLE_DEFINITION","inputType","ARGUMENT","_this$getDirective","argDef","argType","fieldOrDirective","args","find","arg","defaultValue","LIST","listType","itemType","ofType","OBJECT_FIELD","objectType","inputFieldType","inputField","getFields","ENUM","enumType","enumValue","getValue","leave","pop","fieldNode","getQueryType","visitWithTypeInfo","typeInfo","visitor","fn","result","apply"],"mappings":"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","sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { isNode } from '../language/ast.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isCompositeType,\n  isInputType,\n  isOutputType,\n  getNullableType,\n  getNamedType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}