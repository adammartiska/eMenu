{"ast":null,"code":"// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNamesRule, KnownArgumentNamesOnDirectivesRule } from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArgumentsRule, ProvidedRequiredArgumentsOnDirectivesRule } from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs';\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([ExecutableDefinitionsRule, UniqueOperationNamesRule, LoneAnonymousOperationRule, SingleFieldSubscriptionsRule, KnownTypeNamesRule, FragmentsOnCompositeTypesRule, VariablesAreInputTypesRule, ScalarLeafsRule, FieldsOnCorrectTypeRule, UniqueFragmentNamesRule, KnownFragmentNamesRule, NoUnusedFragmentsRule, PossibleFragmentSpreadsRule, NoFragmentCyclesRule, UniqueVariableNamesRule, NoUndefinedVariablesRule, NoUnusedVariablesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, KnownArgumentNamesRule, UniqueArgumentNamesRule, ValuesOfCorrectTypeRule, ProvidedRequiredArgumentsRule, VariablesInAllowedPositionRule, OverlappingFieldsCanBeMergedRule, UniqueInputFieldNamesRule]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueArgumentDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, KnownArgumentNamesOnDirectivesRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, ProvidedRequiredArgumentsOnDirectivesRule]);","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/specifiedRules.mjs"],"names":["ExecutableDefinitionsRule","UniqueOperationNamesRule","LoneAnonymousOperationRule","SingleFieldSubscriptionsRule","KnownTypeNamesRule","FragmentsOnCompositeTypesRule","VariablesAreInputTypesRule","ScalarLeafsRule","FieldsOnCorrectTypeRule","UniqueFragmentNamesRule","KnownFragmentNamesRule","NoUnusedFragmentsRule","PossibleFragmentSpreadsRule","NoFragmentCyclesRule","UniqueVariableNamesRule","NoUndefinedVariablesRule","NoUnusedVariablesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","KnownArgumentNamesRule","KnownArgumentNamesOnDirectivesRule","UniqueArgumentNamesRule","ValuesOfCorrectTypeRule","ProvidedRequiredArgumentsRule","ProvidedRequiredArgumentsOnDirectivesRule","VariablesInAllowedPositionRule","OverlappingFieldsCanBeMergedRule","UniqueInputFieldNamesRule","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueArgumentDefinitionNamesRule","UniqueDirectiveNamesRule","PossibleTypeExtensionsRule","specifiedRules","Object","freeze","specifiedSDLRules"],"mappings":"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","sourcesContent":["// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesRule,\n  KnownArgumentNamesOnDirectivesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs';\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n"]},"metadata":{},"sourceType":"module"}