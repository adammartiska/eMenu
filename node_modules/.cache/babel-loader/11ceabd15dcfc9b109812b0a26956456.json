{"ast":null,"code":"import { visit } from './visitor.mjs';\nimport { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: node => node.value\n  },\n  Variable: {\n    leave: node => '$' + node.name\n  },\n  // Document\n  Document: {\n    leave: node => join(node.definitions, '\\n\\n')\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join([node.operation, join([node.name, varDefs]), join(node.directives, ' ')], ' '); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    }\n\n  },\n  VariableDefinition: {\n    leave: ({\n      variable,\n      type,\n      defaultValue,\n      directives\n    }) => variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '))\n  },\n  SelectionSet: {\n    leave: ({\n      selections\n    }) => block(selections)\n  },\n  Field: {\n    leave({\n      alias,\n      name,\n      arguments: args,\n      directives,\n      selectionSet\n    }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    }\n\n  },\n  Argument: {\n    leave: ({\n      name,\n      value\n    }) => name + ': ' + value\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({\n      name,\n      directives\n    }) => '...' + name + wrap(' ', join(directives, ' '))\n  },\n  InlineFragment: {\n    leave: ({\n      typeCondition,\n      directives,\n      selectionSet\n    }) => join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ')\n  },\n  FragmentDefinition: {\n    leave: ({\n      name,\n      typeCondition,\n      variableDefinitions,\n      directives,\n      selectionSet\n    }) => // Note: fragment variable definitions are experimental and may be changed\n    // or removed in the future.\n    `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` + `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` + selectionSet\n  },\n  // Value\n  IntValue: {\n    leave: ({\n      value\n    }) => value\n  },\n  FloatValue: {\n    leave: ({\n      value\n    }) => value\n  },\n  StringValue: {\n    leave: ({\n      value,\n      block: isBlockString\n    }) => isBlockString ? printBlockString(value) : printString(value)\n  },\n  BooleanValue: {\n    leave: ({\n      value\n    }) => value ? 'true' : 'false'\n  },\n  NullValue: {\n    leave: () => 'null'\n  },\n  EnumValue: {\n    leave: ({\n      value\n    }) => value\n  },\n  ListValue: {\n    leave: ({\n      values\n    }) => '[' + join(values, ', ') + ']'\n  },\n  ObjectValue: {\n    leave: ({\n      fields\n    }) => '{' + join(fields, ', ') + '}'\n  },\n  ObjectField: {\n    leave: ({\n      name,\n      value\n    }) => name + ': ' + value\n  },\n  // Directive\n  Directive: {\n    leave: ({\n      name,\n      arguments: args\n    }) => '@' + name + wrap('(', join(args, ', '), ')')\n  },\n  // Type\n  NamedType: {\n    leave: ({\n      name\n    }) => name\n  },\n  ListType: {\n    leave: ({\n      type\n    }) => '[' + type + ']'\n  },\n  NonNullType: {\n    leave: ({\n      type\n    }) => type + '!'\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({\n      description,\n      directives,\n      operationTypes\n    }) => wrap('', description, '\\n') + join(['schema', join(directives, ' '), block(operationTypes)], ' ')\n  },\n  OperationTypeDefinition: {\n    leave: ({\n      operation,\n      type\n    }) => operation + ': ' + type\n  },\n  ScalarTypeDefinition: {\n    leave: ({\n      description,\n      name,\n      directives\n    }) => wrap('', description, '\\n') + join(['scalar', name, join(directives, ' ')], ' ')\n  },\n  ObjectTypeDefinition: {\n    leave: ({\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    }) => wrap('', description, '\\n') + join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')\n  },\n  FieldDefinition: {\n    leave: ({\n      description,\n      name,\n      arguments: args,\n      type,\n      directives\n    }) => wrap('', description, '\\n') + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '))\n  },\n  InputValueDefinition: {\n    leave: ({\n      description,\n      name,\n      type,\n      defaultValue,\n      directives\n    }) => wrap('', description, '\\n') + join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ')\n  },\n  InterfaceTypeDefinition: {\n    leave: ({\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    }) => wrap('', description, '\\n') + join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')\n  },\n  UnionTypeDefinition: {\n    leave: ({\n      description,\n      name,\n      directives,\n      types\n    }) => wrap('', description, '\\n') + join(['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' ')\n  },\n  EnumTypeDefinition: {\n    leave: ({\n      description,\n      name,\n      directives,\n      values\n    }) => wrap('', description, '\\n') + join(['enum', name, join(directives, ' '), block(values)], ' ')\n  },\n  EnumValueDefinition: {\n    leave: ({\n      description,\n      name,\n      directives\n    }) => wrap('', description, '\\n') + join([name, join(directives, ' ')], ' ')\n  },\n  InputObjectTypeDefinition: {\n    leave: ({\n      description,\n      name,\n      directives,\n      fields\n    }) => wrap('', description, '\\n') + join(['input', name, join(directives, ' '), block(fields)], ' ')\n  },\n  DirectiveDefinition: {\n    leave: ({\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations\n    }) => wrap('', description, '\\n') + 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ')\n  },\n  SchemaExtension: {\n    leave: ({\n      directives,\n      operationTypes\n    }) => join(['extend schema', join(directives, ' '), block(operationTypes)], ' ')\n  },\n  ScalarTypeExtension: {\n    leave: ({\n      name,\n      directives\n    }) => join(['extend scalar', name, join(directives, ' ')], ' ')\n  },\n  ObjectTypeExtension: {\n    leave: ({\n      name,\n      interfaces,\n      directives,\n      fields\n    }) => join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')\n  },\n  InterfaceTypeExtension: {\n    leave: ({\n      name,\n      interfaces,\n      directives,\n      fields\n    }) => join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')\n  },\n  UnionTypeExtension: {\n    leave: ({\n      name,\n      directives,\n      types\n    }) => join(['extend union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' ')\n  },\n  EnumTypeExtension: {\n    leave: ({\n      name,\n      directives,\n      values\n    }) => join(['extend enum', name, join(directives, ' '), block(values)], ' ')\n  },\n  InputObjectTypeExtension: {\n    leave: ({\n      name,\n      directives,\n      fields\n    }) => join(['extend input', name, join(directives, ' '), block(fields)], ' ')\n  }\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(x => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some(str => str.includes('\\n'))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/language/printer.mjs"],"names":["visit","printBlockString","printString","print","ast","printDocASTReducer","MAX_LINE_LENGTH","Name","leave","node","value","Variable","name","Document","join","definitions","OperationDefinition","varDefs","wrap","variableDefinitions","prefix","operation","directives","selectionSet","VariableDefinition","variable","type","defaultValue","SelectionSet","selections","block","Field","alias","arguments","args","argsLine","length","indent","Argument","FragmentSpread","InlineFragment","typeCondition","FragmentDefinition","IntValue","FloatValue","StringValue","isBlockString","BooleanValue","NullValue","EnumValue","ListValue","values","ObjectValue","fields","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","description","operationTypes","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","interfaces","FieldDefinition","hasMultilineItems","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","types","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","repeatable","locations","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","maybeArray","separator","_maybeArray$filter$jo","filter","x","array","start","maybeString","end","str","replace","_maybeArray$some","some","includes"],"mappings":"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","sourcesContent":["import { visit } from './visitor.mjs';\nimport { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n"]},"metadata":{},"sourceType":"module"}