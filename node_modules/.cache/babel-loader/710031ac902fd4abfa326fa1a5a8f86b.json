{"ast":null,"code":"/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false\n      };\n    } catch (error) {\n      // istanbul ignore else (FIXME: add test case)\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function' ? mapResult(await iterator.return()) : {\n        value: undefined,\n        done: true\n      };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/execution/mapAsyncIterator.mjs"],"names":["mapAsyncIterator","iterable","callback","iterator","Symbol","asyncIterator","mapResult","result","done","value","error","return","_e","next","undefined","throw"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;AACnD,QAAMC,QAAQ,GAAGF,QAAQ,CAACG,MAAM,CAACC,aAAR,CAAR,EAAjB;;AAEA,iBAAeC,SAAf,CAAyBC,MAAzB,EAAiC;AAC/B,QAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,aAAOD,MAAP;AACD;;AAED,QAAI;AACF,aAAO;AACLE,QAAAA,KAAK,EAAE,MAAMP,QAAQ,CAACK,MAAM,CAACE,KAAR,CADhB;AAELD,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID,KALD,CAKE,OAAOE,KAAP,EAAc;AACd;AACA,UAAI,OAAOP,QAAQ,CAACQ,MAAhB,KAA2B,UAA/B,EAA2C;AACzC,YAAI;AACF,gBAAMR,QAAQ,CAACQ,MAAT,EAAN;AACD,SAFD,CAEE,OAAOC,EAAP,EAAW;AACX;AACD;AACF;;AAED,YAAMF,KAAN;AACD;AACF;;AAED,SAAO;AACL,UAAMG,IAAN,GAAa;AACX,aAAOP,SAAS,CAAC,MAAMH,QAAQ,CAACU,IAAT,EAAP,CAAhB;AACD,KAHI;;AAKL,UAAMF,MAAN,GAAe;AACb;AACA,aAAO,OAAOR,QAAQ,CAACQ,MAAhB,KAA2B,UAA3B,GACHL,SAAS,CAAC,MAAMH,QAAQ,CAACQ,MAAT,EAAP,CADN,GAEH;AACEF,QAAAA,KAAK,EAAEK,SADT;AAEEN,QAAAA,IAAI,EAAE;AAFR,OAFJ;AAMD,KAbI;;AAeL,UAAMO,KAAN,CAAYL,KAAZ,EAAmB;AACjB,UAAI,OAAOP,QAAQ,CAACY,KAAhB,KAA0B,UAA9B,EAA0C;AACxC,eAAOT,SAAS,CAAC,MAAMH,QAAQ,CAACY,KAAT,CAAeL,KAAf,CAAP,CAAhB;AACD;;AAED,YAAMA,KAAN;AACD,KArBI;;AAuBL,KAACN,MAAM,CAACC,aAAR,IAAyB;AACvB,aAAO,IAAP;AACD;;AAzBI,GAAP;AA2BD","sourcesContent":["/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false,\n      };\n    } catch (error) {\n      // istanbul ignore else (FIXME: add test case)\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function'\n        ? mapResult(await iterator.return())\n        : {\n            value: undefined,\n            done: true,\n          };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}