{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE:\n      {\n        const innerType = typeFromAST(schema, typeNode.type);\n        return innerType && new GraphQLList(innerType);\n      }\n\n    case Kind.NON_NULL_TYPE:\n      {\n        const innerType = typeFromAST(schema, typeNode.type);\n        return innerType && new GraphQLNonNull(innerType);\n      }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/utilities/typeFromAST.mjs"],"names":["Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","kind","LIST_TYPE","innerType","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,wBAA5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC5C,UAAQA,QAAQ,CAACC,IAAjB;AACE,SAAKN,IAAI,CAACO,SAAV;AAAqB;AACnB,cAAMC,SAAS,GAAGL,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAA7B;AACA,eAAOD,SAAS,IAAI,IAAIP,WAAJ,CAAgBO,SAAhB,CAApB;AACD;;AAED,SAAKR,IAAI,CAACU,aAAV;AAAyB;AACvB,cAAMF,SAAS,GAAGL,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAA7B;AACA,eAAOD,SAAS,IAAI,IAAIN,cAAJ,CAAmBM,SAAnB,CAApB;AACD;;AAED,SAAKR,IAAI,CAACW,UAAV;AACE,aAAOP,MAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP;AAZJ;AAcD","sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}