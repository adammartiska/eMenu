{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\n\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(new GraphQLError(`Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`, node.type));\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"],"names":["GraphQLError","print","isInputType","typeFromAST","VariablesAreInputTypesRule","context","VariableDefinition","node","type","getSchema","undefined","variableName","variable","name","value","typeName","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,OAApC,EAA6C;AAClD,SAAO;AACLC,IAAAA,kBAAkB,CAACC,IAAD,EAAO;AACvB,YAAMC,IAAI,GAAGL,WAAW,CAACE,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,IAA3B,CAAxB;;AAEA,UAAIA,IAAI,KAAKE,SAAT,IAAsB,CAACR,WAAW,CAACM,IAAD,CAAtC,EAA8C;AAC5C,cAAMG,YAAY,GAAGJ,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmBC,KAAxC;AACA,cAAMC,QAAQ,GAAGd,KAAK,CAACM,IAAI,CAACC,IAAN,CAAtB;AACAH,QAAAA,OAAO,CAACW,WAAR,CACE,IAAIhB,YAAJ,CACG,cAAaW,YAAa,+BAA8BI,QAAS,IADpE,EAEER,IAAI,CAACC,IAFP,CADF;AAMD;AACF;;AAdI,GAAP;AAgBD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            node.type,\n          ),\n        );\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}