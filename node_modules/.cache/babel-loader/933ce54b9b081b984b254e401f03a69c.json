{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/utilities/getOperationAST.mjs"],"names":["Kind","getOperationAST","documentAST","operationName","operation","definition","definitions","kind","OPERATION_DEFINITION","_definition$name","name","value"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,aAAtC,EAAqD;AAC1D,MAAIC,SAAS,GAAG,IAAhB;;AAEA,OAAK,MAAMC,UAAX,IAAyBH,WAAW,CAACI,WAArC,EAAkD;AAChD,QAAID,UAAU,CAACE,IAAX,KAAoBP,IAAI,CAACQ,oBAA7B,EAAmD;AACjD,UAAIC,gBAAJ;;AAEA,UAAIN,aAAa,IAAI,IAArB,EAA2B;AACzB;AACA;AACA;AACA,YAAIC,SAAJ,EAAe;AACb,iBAAO,IAAP;AACD;;AAEDA,QAAAA,SAAS,GAAGC,UAAZ;AACD,OATD,MASO,IACL,CAAC,CAACI,gBAAgB,GAAGJ,UAAU,CAACK,IAA/B,MAAyC,IAAzC,IACDD,gBAAgB,KAAK,KAAK,CADzB,GAEG,KAAK,CAFR,GAGGA,gBAAgB,CAACE,KAHrB,MAGgCR,aAJ3B,EAKL;AACA,eAAOE,UAAP;AACD;AACF;AACF;;AAED,SAAOD,SAAP;AACD","sourcesContent":["import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n"]},"metadata":{},"sourceType":"module"}