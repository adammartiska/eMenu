{"ast":null,"code":"import { keyMap } from '../jsutils/keyMap.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(new GraphQLError(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, varDefNode.type));\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(new GraphQLError(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, varDefNode));\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(new GraphQLError(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, varDefNode));\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(value, varType, (path, invalidValue, error) => {\n      let prefix = `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n      if (path.length > 0) {\n        prefix += ` at \"${varName}${printPathArray(path)}\"`;\n      }\n\n      onError(new GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));\n    });\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];\n  const argNodeMap = keyMap(argumentNodes, arg => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', node);\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, valueNode);\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', valueNode);\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, valueNode);\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n  const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(directive => directive.name.value === directiveDef.name);\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/eMenu-customer/node_modules/graphql/execution/values.mjs"],"names":["keyMap","inspect","printPathArray","GraphQLError","Kind","print","isInputType","isNonNullType","typeFromAST","valueFromAST","coerceInputValue","getVariableValues","schema","varDefNodes","inputs","options","errors","maxErrors","coerced","coerceVariableValues","error","length","push","onError","coercedValues","varDefNode","varName","variable","name","value","varType","type","varTypeStr","hasOwnProperty","defaultValue","path","invalidValue","prefix","message","undefined","originalError","getArgumentValues","def","node","variableValues","_node$arguments","argumentNodes","arguments","argNodeMap","arg","argDef","args","argType","argumentNode","valueNode","isNull","kind","NULL","VARIABLE","variableName","coercedValue","getDirectiveValues","directiveDef","_node$directives","directiveNode","directives","find","directive","obj","prop","Object","prototype","call"],"mappings":"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","sourcesContent":["import { keyMap } from '../jsutils/keyMap.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          varDefNode.type,\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            varDefNode,\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          varDefNode,\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(\n            prefix + '; ' + error.message,\n            varDefNode,\n            undefined,\n            undefined,\n            undefined,\n            error.originalError,\n          ),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          node,\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            valueNode,\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        valueNode,\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        valueNode,\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n"]},"metadata":{},"sourceType":"module"}