{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinks: {}\n  },\n  reducers: {\n    addToCart: (state, {\n      payload\n    }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = { ...state.drinks,\n        [payload.id]: payload.valu\n      };\n    } // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToCart,\n  decrement,\n  incrementByAmount\n} = drinksSlice.actions;\nexport default drinksSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/src/pages/drinksSlice.js"],"names":["createSlice","drinksSlice","name","initialState","drinks","reducers","addToCart","state","payload","id","valu","decrement","incrementByAmount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGD,WAAW,CAAC;AACrCE,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AADI,GAFuB;AAKrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACjC;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,MAAN,GAAe,EACX,GAAGG,KAAK,CAACH,MADE;AAEV,SAACI,OAAO,CAACC,EAAT,GAAcD,OAAO,CAACE;AAFZ,OAAf;AAID,KAVO,CAWR;AACA;AACA;AACA;AACA;AACA;;AAhBQ;AAL2B,CAAD,CAA/B,C,CAyBP;;AACA,OAAO,MAAM;AAAEJ,EAAAA,SAAF;AAAaK,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CX,WAAW,CAACY,OAAhE;AAEP,eAAeZ,WAAW,CAACa,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinks: {},\n  },\n  reducers: {\n    addToCart: (state, { payload }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = {\n          ...state.drinks,\n           [payload.id]: payload.valu\n      }\n    },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addToCart, decrement, incrementByAmount } = drinksSlice.actions;\n\nexport default drinksSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}