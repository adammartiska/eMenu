{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst findRelevantDrinkIndex = (drinks, id) => drinks.findIndex(drink => drink.id === id);\n\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinks: []\n  },\n  reducers: {\n    addToCart: (state, {\n      payload\n    }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = [...state.drinks, payload];\n    },\n    incrementCount: (state, {\n      payload\n    }) => {\n      state.drinks = () => {\n        console.log(state.drinks[findRelevantDrinkIndex(state.drinks, payload.id)].count++);\n        return state.drinks;\n      };\n    } // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToCart,\n  decrement,\n  incrementCount\n} = drinksSlice.actions;\nexport default drinksSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/src/pages/drinksSlice.js"],"names":["createSlice","findRelevantDrinkIndex","drinks","id","findIndex","drink","drinksSlice","name","initialState","reducers","addToCart","state","payload","incrementCount","console","log","count","decrement","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,MAAD,EAASC,EAAT,KAC7BD,MAAM,CAACE,SAAP,CAAkBC,KAAD,IAAWA,KAAK,CAACF,EAAN,KAAaA,EAAzC,CADF;;AAGA,OAAO,MAAMG,WAAW,GAAGN,WAAW,CAAC;AACrCO,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZN,IAAAA,MAAM,EAAE;AADI,GAFuB;AAKrCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACjC;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACT,MAAN,GAAe,CAAC,GAAGS,KAAK,CAACT,MAAV,EAAkBU,OAAlB,CAAf;AACD,KAPO;AAQRC,IAAAA,cAAc,EAAE,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtCD,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAM;AACjBY,QAAAA,OAAO,CAACC,GAAR,CAAaJ,KAAK,CAACT,MAAN,CAAaD,sBAAsB,CAACU,KAAK,CAACT,MAAP,EAAeU,OAAO,CAACT,EAAvB,CAAnC,EAA+Da,KAA/D,EAAb;AACA,eAAOL,KAAK,CAACT,MAAb;AACH,OAHD;AAID,KAbO,CAcR;AACA;AACA;AACA;AACA;AACA;;AAnBQ;AAL2B,CAAD,CAA/B,C,CA4BP;;AACA,OAAO,MAAM;AAAEQ,EAAAA,SAAF;AAAaO,EAAAA,SAAb;AAAwBJ,EAAAA;AAAxB,IAA2CP,WAAW,CAACY,OAA7D;AAEP,eAAeZ,WAAW,CAACa,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst findRelevantDrinkIndex = (drinks, id) =>\n  drinks.findIndex((drink) => drink.id === id);\n\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinks: [],\n  },\n  reducers: {\n    addToCart: (state, { payload }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = [...state.drinks, payload];\n    },\n    incrementCount: (state, { payload }) => {\n      state.drinks = () => {\n          console.log( state.drinks[findRelevantDrinkIndex(state.drinks, payload.id)].count++)\n          return state.drinks\n      }\n    },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addToCart, decrement, incrementCount } = drinksSlice.actions;\n\nexport default drinksSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}