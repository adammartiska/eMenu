{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst findRelevantDrink = (drinks, id) => {\n  const drink = drinks.filter(drink => drink.id !== id);\n  console.log(drink);\n  return drink;\n};\n\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinks: []\n  },\n  reducers: {\n    addToCart: (state, {\n      payload\n    }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = [...state.drinks, payload];\n    },\n    incrementCount: (state, {\n      payload\n    }) => {\n      state.drinks = [...state.drinks, findRelevantDrink(state.drinks, payload)];\n    } // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addToCart,\n  decrement,\n  incrementCount\n} = drinksSlice.actions;\nexport default drinksSlice.reducer;","map":{"version":3,"sources":["/Users/adammartiska/Projects/eMenu/GUI/src/pages/drinksSlice.js"],"names":["createSlice","findRelevantDrink","drinks","id","drink","filter","console","log","drinksSlice","name","initialState","reducers","addToCart","state","payload","incrementCount","decrement","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,MAAD,EAASC,EAAT,KAAgB;AACxC,QAAMC,KAAK,GACbF,MAAM,CAACG,MAAP,CAAeD,KAAD,IAAWA,KAAK,CAACD,EAAN,KAAaA,EAAtC,CADE;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,SAAOA,KAAP;AACD,CALD;;AAOA,OAAO,MAAMI,WAAW,GAAGR,WAAW,CAAC;AACrCS,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZR,IAAAA,MAAM,EAAE;AADI,GAFuB;AAKrCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACjC;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACX,MAAN,GAAe,CAAC,GAAGW,KAAK,CAACX,MAAV,EAAkBY,OAAlB,CAAf;AACD,KAPO;AAQRC,IAAAA,cAAc,EAAE,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtCD,MAAAA,KAAK,CAACX,MAAN,GAAe,CACb,GAAGW,KAAK,CAACX,MADI,EAEbD,iBAAiB,CAACY,KAAK,CAACX,MAAP,EAAeY,OAAf,CAFJ,CAAf;AAID,KAbO,CAcR;AACA;AACA;AACA;AACA;AACA;;AAnBQ;AAL2B,CAAD,CAA/B,C,CA4BP;;AACA,OAAO,MAAM;AAAEF,EAAAA,SAAF;AAAaI,EAAAA,SAAb;AAAwBD,EAAAA;AAAxB,IAA2CP,WAAW,CAACS,OAA7D;AAEP,eAAeT,WAAW,CAACU,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst findRelevantDrink = (drinks, id) => {\n  const drink = \ndrinks.filter((drink) => drink.id !== id);\n  console.log(drink);\n  return drink;\n};\n\nexport const drinksSlice = createSlice({\n  name: \"drinks\",\n  initialState: {\n    drinks: [],\n  },\n  reducers: {\n    addToCart: (state, { payload }) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.drinks = [...state.drinks, payload];\n    },\n    incrementCount: (state, { payload }) => {\n      state.drinks = [\n        ...state.drinks,\n        findRelevantDrink(state.drinks, payload),\n      ];\n    },\n    // decrement: (state) => {\n    //   state.value -= 1\n    // },\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload\n    // },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addToCart, decrement, incrementCount } = drinksSlice.actions;\n\nexport default drinksSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}